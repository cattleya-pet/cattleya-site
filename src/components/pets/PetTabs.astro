---
import './PetTabs.scss';

interface Props {
  activeTab: string;
}

const { activeTab } = Astro.props;
const tabs = [
  { id: 'all', label: 'すべて' },
  { id: 'dog', label: '子犬' },
  { id: 'cat', label: '子猫' }
];
---

<div class="pet-tabs">
  {tabs.map(tab => (
    <button
      type="button"
      data-tab={tab.id}
      class:list={[
        'pet-tabs__item',
        { 'pet-tabs__item--active': activeTab === tab.id }
      ]}
    >
      <span class="pet-tabs__label">{tab.label}</span>
      <span class="pet-tabs__arrow">▼</span>
    </button>
  ))}
</div>

<script>
  import { getImageUrl } from '../../lib/utils/image';
  import { formatDate } from '../../lib/utils/date';

  const tabButtons = document.querySelectorAll('.pet-tabs__item');
  const petsGrid = document.querySelector('.pets-grid');
  const allPets = JSON.parse(petsGrid?.dataset.allPets || '[]');
  const dogs = JSON.parse(petsGrid?.dataset.dogs || '[]');
  const cats = JSON.parse(petsGrid?.dataset.cats || '[]');

  // ペットカードのテンプレート関数を最適化
  function generatePetCard(pet) {
    const imageUrl = getImageUrl(pet.imageUrl01, 600, 600);
    const breedTypeEn = (pet.breedTypeEn || '').toLowerCase();
    const genderIcon = pet.gender === '男の子' 
      ? '<img class="pet-card__gender male" src="/icons/icon_male.png" alt="男性" />'
      : pet.gender === '女の子' 
        ? '<img class="pet-card__gender female" src="/icons/icon_female.png" alt="女性" />'
        : '';
    
    return `
      <div class="pet-card" data-animal-type="${pet.animalType}">
        <a href="/search/${pet.animalType}s/${pet.classification === 'mix' ? 'mix/' : ''}${encodeURIComponent(breedTypeEn)}/${pet.id || pet.contentId}" class="pet-card__link">
          <div class="pet-card__inner">
            <div class="pet-card__image-container">
              <img
                class="pet-card__image"
                src="${imageUrl}"
                alt="${pet.breedTypeJa}の写真"
                loading="lazy"
                width="600"
                height="600"
                onerror="this.src='/images/ui/img_loading-pet-image-01.webp'"
              />
            </div>
            <div class="pet-card__info">
              <h3 class="pet-card__title">
                ${pet.breedTypeJa}
                ${genderIcon}
              </h3>
              <div class="pet-card__details">
                <p class="pet-card__detail-item">カラー：${pet.color}</p>
                <p class="pet-card__detail-item">誕生日：${formatDate(pet.birthday)}</p>
                <p class="pet-card__detail-item">店舗：${pet.storeName}</p>
              </div>
            </div>
          </div>
        </a>
      </div>
    `;
  }

  // ペット表示を更新する関数
  function updatePetsDisplay(selectedTab) {
    const dataMap = { all: allPets, dog: dogs, cat: cats };
    const allCurrentPets = dataMap[selectedTab] || [];
    const currentPets = allCurrentPets.slice(0, 24); // 初期24件表示

    if (petsGrid) {
      // DocumentFragmentを使用してDOMの更新を最適化
      const fragment = document.createDocumentFragment();
      const tempDiv = document.createElement('div');
      tempDiv.innerHTML = currentPets.map(generatePetCard).join('');
      
      while (tempDiv.firstChild) {
        fragment.appendChild(tempDiv.firstChild);
      }
      
      petsGrid.replaceChildren(fragment);
    }

    // 件数表示を更新（全数を表示）
    const petsCountElement = document.getElementById('pets-count');
    if (petsCountElement) {
      const numberElement = petsCountElement.querySelector('.pets-count__number');
      if (numberElement) {
        numberElement.textContent = allCurrentPets.length.toString();
      }
    }

    // ViewMoreボタンの表示制御
    const viewMoreButton = document.getElementById('viewMoreButton');
    if (viewMoreButton) {
      if (allCurrentPets.length > 24) {
        viewMoreButton.style.display = 'flex';
      } else {
        viewMoreButton.style.display = 'none';
      }
    }

    // 外部のindices変数を更新（searchページ用）
    if (typeof window !== 'undefined' && window.indices) {
      window.indices[selectedTab] = 24;
    }
    
    // タブ変更イベントを発行してsearchページに通知
    document.dispatchEvent(new CustomEvent('tabChanged', { 
      detail: { tab: selectedTab } 
    }));
  }

  // 初期表示時に現在のアクティブタブに応じたペットを表示
  const activeButton = document.querySelector('.pet-tabs__item--active');
  if (activeButton) {
    const initialTab = activeButton.dataset.tab || 'all';
    updatePetsDisplay(initialTab);
  }

  tabButtons.forEach(button => {
    button.addEventListener('click', () => {
      if (button.classList.contains('pet-tabs__item--active')) return;
      
      // ステート更新を最小化
      tabButtons.forEach(btn => btn.classList.remove('pet-tabs__item--active'));
      button.classList.add('pet-tabs__item--active');

      const selectedTab = button.dataset.tab;
      updatePetsDisplay(selectedTab);

      // カスタムイベント発行
      document.dispatchEvent(new CustomEvent('tabChanged', { 
        detail: { tab: selectedTab } 
      }));
    });
  });
</script>