---
import './PetTabs.scss';

interface Props {
  activeTab: string;
}

const { activeTab } = Astro.props;
const tabs = [
  { id: 'all', label: 'すべて' },
  { id: 'dog', label: '子犬' },
  { id: 'cat', label: '子猫' }
];
---

<div class="pet-tabs">
  {tabs.map(tab => (
    <button
      type="button"
      data-tab={tab.id}
      class:list={[
        'pet-tabs__item',
        { 'pet-tabs__item--active': activeTab === tab.id }
      ]}
    >
      <span class="pet-tabs__label">{tab.label}</span>
      <span class="pet-tabs__arrow">▼</span>
    </button>
  ))}
</div>

<script>
  import { getImageUrl } from '../../lib/utils/image';
  import { formatDate } from '../../lib/utils/date';

  const tabButtons = document.querySelectorAll('.pet-tabs__item');
  const petsGrid = document.querySelector('.pets-grid');
  const allPets = JSON.parse(petsGrid?.dataset.allPets || '[]');
  const dogs = JSON.parse(petsGrid?.dataset.dogs || '[]');
  const cats = JSON.parse(petsGrid?.dataset.cats || '[]');

  // ペットカードのテンプレート関数を最適化
  function generatePetCard(pet) {
    const imageUrl = getImageUrl(pet.imageUrl01, 600, 600);
    const breedTypeEn = (pet.breedTypeEn || '').toLowerCase();
    const genderIcon = pet.gender === '男の子' 
      ? '<span class="pet-card__gender male"><svg width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M15 0V5H14V1.733L8.871 6.817C9.201 7.297 9.47167 7.80367 9.683 8.337C9.89433 8.87033 10 9.42467 10 10C10 11.394 9.51533 12.576 8.546 13.546C7.57667 14.516 6.39533 15.0007 5.002 15C3.60867 14.9993 2.42667 14.5147 1.456 13.546C0.485333 12.5773 0 11.396 0 10.002C0 8.608 0.485 7.426 1.455 6.456C2.425 5.486 3.60667 5.00067 5 5C5.576 5 6.12733 5.105 6.654 5.315C7.18067 5.52433 7.682 5.79567 8.158 6.129L13.287 1H10V0H15ZM4.997 6C3.89167 6 2.949 6.39067 2.169 7.172C1.38967 7.954 1 8.89767 1 10.003C1 11.109 1.39067 12.0517 2.172 12.831C2.954 13.6103 3.89767 14 5.003 14C6.109 14 7.05167 13.6093 7.831 12.828C8.61033 12.046 9 11.1023 9 9.997C9 8.89167 8.60933 7.949 7.828 7.169C7.04667 6.389 6.103 5.99933 4.997 6Z" fill="#7398D5"/></svg></span>'
      : pet.gender === '女の子' 
        ? '<span class="pet-card__gender female"><svg width="10" height="16" viewBox="0 0 10 16" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M4.5 16V14H2.5V13H4.5V9.977C3.222 9.83367 2.15233 9.288 1.291 8.34C0.430334 7.39133 0 6.27433 0 4.989C0 3.60033 0.486333 2.42167 1.459 1.453C2.431 0.484333 3.61133 0 5 0C6.38867 0 7.569 0.484333 8.541 1.453C9.513 2.42167 9.99933 3.60033 10 4.989C10 6.27433 9.56967 7.391 8.709 8.339C7.84767 9.28767 6.778 9.83367 5.5 9.977V13H7.5V14H5.5V16H4.5ZM5.003 9C6.109 9 7.05167 8.60933 7.831 7.828C8.61033 7.046 9 6.10233 9 4.997C9 3.89167 8.60933 2.949 7.828 2.169C7.04667 1.389 6.103 0.999333 4.997 1C3.891 1.00067 2.94833 1.39133 2.169 2.172C1.38967 2.954 1 3.89767 1 5.003C1 6.109 1.39067 7.05167 2.172 7.831C2.954 8.61033 3.89767 9 5.003 9Z" fill="#D55665"/></svg></span>'
        : '';
    
    return `
      <div class="pet-card" data-animal-type="${pet.animalType}">
        <a href="/search/${pet.animalType}s/${pet.classification === 'mix' ? 'mix/' : ''}${encodeURIComponent(breedTypeEn)}/${pet.id || pet.contentId}" class="pet-card__link">
          <div class="pet-card__inner">
            <div class="pet-card__image-container">
              <img
                class="pet-card__image"
                src="${imageUrl}"
                alt="${pet.breedTypeJa}の写真"
                loading="lazy"
                width="600"
                height="600"
                onerror="this.src='/images/ui/img_loading-pet-image-01.webp'"
              />
            </div>
            <div class="pet-card__info">
              <h3 class="pet-card__title">
                ${pet.breedTypeJa}
                ${genderIcon}
              </h3>
              <div class="pet-card__details">
                <p class="pet-card__detail-item">カラー：${pet.color}</p>
                <p class="pet-card__detail-item">誕生日：${formatDate(pet.birthday)}</p>
                <p class="pet-card__detail-item">店舗：${pet.storeName}</p>
              </div>
            </div>
          </div>
        </a>
      </div>
    `;
  }

  // ペット表示を更新する関数
  function updatePetsDisplay(selectedTab) {
    const dataMap = { all: allPets, dog: dogs, cat: cats };
    const currentPets = dataMap[selectedTab] || [];

    if (petsGrid) {
      // DocumentFragmentを使用してDOMの更新を最適化
      const fragment = document.createDocumentFragment();
      const tempDiv = document.createElement('div');
      tempDiv.innerHTML = currentPets.map(generatePetCard).join('');
      
      while (tempDiv.firstChild) {
        fragment.appendChild(tempDiv.firstChild);
      }
      
      petsGrid.replaceChildren(fragment);
    }
  }

  // 初期表示時に現在のアクティブタブに応じたペットを表示
  const activeButton = document.querySelector('.pet-tabs__item--active');
  if (activeButton) {
    const initialTab = activeButton.dataset.tab || 'all';
    updatePetsDisplay(initialTab);
  }

  tabButtons.forEach(button => {
    button.addEventListener('click', () => {
      if (button.classList.contains('pet-tabs__item--active')) return;
      
      // ステート更新を最小化
      tabButtons.forEach(btn => btn.classList.remove('pet-tabs__item--active'));
      button.classList.add('pet-tabs__item--active');

      const selectedTab = button.dataset.tab;
      updatePetsDisplay(selectedTab);

      // カスタムイベント発行
      document.dispatchEvent(new CustomEvent('tabChanged', { 
        detail: { tab: selectedTab } 
      }));
    });
  });
</script>