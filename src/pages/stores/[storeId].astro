---
import Layout from '../../layouts/Layout.astro';
import { getStoreByStoreId } from '../../lib/api/stores';
import { getImageUrl } from '../../lib/utils/image';
import { formatDate } from '../../lib/utils/date';
import MaleIcon from '../../assets/icons/icon_male.svg?raw';
import FemaleIcon from '../../assets/icons/icon_female.svg?raw';
import BaseButton from '../../components/ui/buttons/BaseButton.astro';
import ButtonWrapper from '../../components/ui/buttons/ButtonWrapper.astro';
import VoiceCard from '../../components/voice/VoiceCard.astro';
import Breadcrumb from '../../components/ui/Breadcrumb.astro';
import PetTabs from '../../components/pets/PetTabs.astro';
import PetCard from '../../components/pets/PetCard.astro';
import SectionHeading from '../../components/ui/SectionHeading.astro';
import BannerSection from '../../components/sections/common/BannerSection.astro';
import ContactCTASection from '../../components/sections/common/ContactCTASection.astro';
import '../../styles/layout/pets-grid.scss';
import '../../components/pets/PetCard.scss';
import '../../styles/pages/pet-detail.scss';

export async function getStaticPaths() {
  try {
    const { getAllStores } = await import('../../lib/api/stores');
    const stores = await getAllStores();
    
    const paths = stores.map((store) => ({
      params: { 
        storeId: store.storeId
      }
    }));
    
    console.log('[getStaticPaths] 生成される店舗詳細ページ数:', paths.length);
    return paths;
  } catch (error) {
    console.error('[getStaticPaths] 店舗詳細ページエラー:', error);
    return [];
  }
}

const { storeId } = Astro.params;

console.log('=== 店舗詳細ページ開始 ===');
console.log('storeId:', storeId);

// 店舗詳細データを取得
const storeInfo = await getStoreByStoreId(storeId);

if (!storeInfo) {
  console.error(`Store not found: ${storeId}`);
  return Astro.redirect('/stores?error=not-found');
}

console.log('見つかった店舗:', storeInfo.storeName);
console.log('店舗画像数:', storeInfo.storeImages?.length || 0);
console.log('店舗動画URL:', storeInfo.storeMovie);

// 必須情報のバリデーション
if (!storeInfo.storeName) {
  console.warn('店舗名が設定されていません');
}
if (!storeInfo.storeAddress && !storeInfo.storePostCode) {
  console.warn('店舗の住所情報が設定されていません');
}

// 画像・動画URLを準備
const mediaItems = [];
const placeholderImage = '/images/ui/img_loading-pet-image-01.webp';

// メディアスロットの準備（最大4つ：画像3枚 + 動画1つ）
const maxImages = 3;
const mediaSlots = [
  ...Array.from({ length: maxImages }, (_, i) => ({ 
    url: storeInfo.storeImages?.[i]?.url, 
    type: 'image', 
    label: `写真${i + 1}` 
  })),
  { url: storeInfo.storeMovie, type: 'video', label: '動画' }
];

mediaSlots.forEach((slot, index) => {
  if (slot.url) {
    if (slot.type === 'image') {
      mediaItems.push({
        type: 'image',
        url: getImageUrl(slot.url, 800, 600),
        thumbnail: getImageUrl(slot.url, 150, 150),
        alt: `${storeInfo.storeName}の${slot.label}`
      });
    } else if (slot.type === 'video') {
      console.log('=== 店舗動画処理デバッグ ===');
      console.log('店舗動画データ型:', typeof slot.url);
      console.log('店舗動画データ:', slot.url);
      
      // 動画URLの正規化処理
      let videoUrl = null;
      
      if (!slot.url) {
        console.log('動画データが存在しません');
      } else if (typeof slot.url === 'string') {
        // 文字列の場合（従来のGoogle Driveまたはファイルパス）
        videoUrl = slot.url;
        console.log('文字列URL:', videoUrl);
        
        // 相対パスの場合は絶対パスに変換
        if (!videoUrl.startsWith('http') && !videoUrl.startsWith('/')) {
          videoUrl = `/${videoUrl}`;
        }
      } else if (typeof slot.url === 'object' && slot.url?.url) {
        // MicroCMSファイルフィールドの場合
        videoUrl = slot.url.url;
        console.log('MicroCMSファイルURL:', videoUrl);
        console.log('ファイルサイズ:', slot.url.fileSize);
      }
      
      console.log('最終的な動画URL:', videoUrl);
      
      if (videoUrl) {
        // テスト用動画URL（フォールバック用）
        const testVideoUrl = 'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4';
        
        mediaItems.push({
          type: 'video',
          url: videoUrl,
          thumbnail: videoUrl, // 動画URLをサムネイル用にも使用
          alt: `${storeInfo.storeName}の${slot.label}`,
          testUrl: testVideoUrl // デバッグ用
        });
      } else {
        console.log('有効な動画URLが見つからないため、プレースホルダーを使用');
        mediaItems.push({
          type: 'image',
          url: placeholderImage,
          thumbnail: placeholderImage,
          alt: `${storeInfo.storeName}のプレースホルダー動画`,
          isPlaceholder: true
        });
      }
    }
  } else {
    // 空のスロットにはプレースホルダー画像を使用
    mediaItems.push({
      type: 'image',
      url: placeholderImage,
      thumbnail: placeholderImage,
      alt: `${storeInfo.storeName}のプレースホルダー画像${index + 1}`,
      isPlaceholder: true
    });
  }
});

console.log('メディア項目数:', mediaItems.length);
console.log('メディア項目詳細:', mediaItems.map(item => ({ type: item.type, hasUrl: !!item.url, hasThumbnail: !!item.thumbnail })));

// 店舗のペットデータを取得（トップページと同じロジック）
const { getAllLatestPets } = await import('../../lib/api/pets/queries');
try {
  // 全ペットを取得（既にシャッフル済み）
  const allPets = await getAllLatestPets();
  
  // 当該店舗のペットをフィルタリング（シャッフル順序を維持）
  const allStorePets = allPets.filter(pet => pet.storeName === storeInfo.storeName);
  
  // 全ての店舗ペットを表示するように変更
  var storeDogs = allStorePets.filter(pet => pet.animalType === 'dog');
  var storeCats = allStorePets.filter(pet => pet.animalType === 'cat');
  var initialPets = allStorePets; // 全ての店舗ペットを表示
  
} catch (error) {
  console.error('ペットデータの取得に失敗しました:', error);
  var initialPets = [];
  var storeDogs = [];
  var storeCats = [];
}

console.log('店舗ペット数 - 初期表示:', initialPets?.length || 0, '犬:', storeDogs?.length || 0, '猫:', storeCats?.length || 0);

// お客様の声データを取得（最大2件を表示）
let displayVoices = [];
try {
  const { getVoices } = await import('../../lib/api/voice');
  const allVoices = await getVoices(3); // 余裕を持たせて3件取得
  displayVoices = allVoices.slice(0, 2);
  console.log('お客様の声データ:', displayVoices.length, '件取得');
} catch (error) {
  console.error('お客様の声データの取得に失敗しました:', error);
  displayVoices = [];
}

// SEO用のメタデータを生成
const storeTitle = `${storeInfo.storeName}`;
const storeDescription = `カトレア${storeInfo.storeName}の店舗情報。${storeInfo.storeAddress}にございます。営業時間：${storeInfo.businessHours?.replace(/\n/g, ' ')}。子犬・子猫との出会いをサポートします。`;

// パンくずリストのデータ
const breadcrumbItems = [
  { label: 'ホーム', href: '/' },
  { label: '店舗一覧', href: '/stores' },
  { label: `${storeInfo.storeName}` }
];
---

<Layout title={storeTitle} description={storeDescription}>
  <main>
    <!-- パンくずリスト -->
    <div class="breadcrumb-container">
      <div class="container">
        <Breadcrumb items={breadcrumbItems} />
      </div>
    </div>
    
    <section class="pet-detail store-detail">
      <div class="container">
        <div class="pet-detail__content">
          <!-- 店舗名 -->
          <div class="pet-detail__header">
            <h1 class="pet-detail__title">
              Cattleya {storeInfo.storeName}
            </h1>
          </div>

          <div class="pet-detail__body">
            <!-- カルーセル -->
            <div class="pet-detail__carousel">
              <div class="carousel">
                <div class="carousel__main">
                  <button class="carousel__nav carousel__nav--prev" id="prevBtn">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" width="24" height="24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                    </svg>
                  </button>
                  
                  <div class="carousel__container" id="carousel-container">
                    {mediaItems.map((item, index) => (
                      <div 
                        class={`carousel__slide ${index === 0 ? 'carousel__slide--active' : ''}`}
                        data-index={index}
                      >
                        {item.type === 'image' ? (
                          <img 
                            src={item.url}
                            alt={item.alt}
                            class="carousel__image carousel__image--clickable"
                            loading={index === 0 ? 'eager' : 'lazy'}
                            onload="this.style.opacity='1'"
                            style="opacity: 0; transition: opacity 0.3s ease; cursor: pointer;"
                          />
                        ) : (
                          <div class="carousel__video-container">
                            <video
                              class="carousel__video"
                              data-video-src={item.url}
                              preload="metadata"
                              muted
                              playsInline
                            ></video>
                            <div class="carousel__video-play-btn">
                              <svg viewBox="0 0 24 24" fill="currentColor" width="48" height="48">
                                <path d="M8,5.14V19.14L19,12.14L8,5.14Z"/>
                              </svg>
                            </div>
                          </div>
                        )}
                      </div>
                    ))}
                  </div>

                  <button class="carousel__nav carousel__nav--next" id="nextBtn">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" width="24" height="24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                    </svg>
                  </button>
                </div>

                <!-- サムネイル -->
                <div class="carousel__thumbnails">
                  {mediaItems.map((item, index) => (
                    <button 
                      class={`carousel__thumbnail ${index === 0 ? 'carousel__thumbnail--active' : ''}`}
                      data-index={index}
                    >
                      {item.type === 'image' ? (
                        <img 
                          src={item.thumbnail}
                          alt={item.alt}
                          class="carousel__thumbnail-image"
                        />
                      ) : (
                        <div class="carousel__thumbnail-video">
                          <video
                            class="carousel__thumbnail-video-element"
                            data-video-src={item.url}
                            preload="metadata"
                            muted
                            playsInline
                          ></video>
                          <div class="carousel__thumbnail-play-icon">
                            <svg viewBox="0 0 24 24" fill="currentColor" width="24" height="24">
                              <path d="M8,5.14V19.14L19,12.14L8,5.14Z"/>
                            </svg>
                          </div>
                        </div>
                      )}
                    </button>
                  ))}
                </div>
              </div>
            </div>

            <!-- サイドバー（店舗情報） -->
            <div class="pet-detail__sidebar">
              <!-- タイトル（lg以上で表示） -->
              <div class="pet-detail__sidebar-title">
                <h1 class="pet-detail__title">
                  Cattleya {storeInfo.storeName}
                </h1>
              </div>

              <!-- 店舗情報 -->
              <div class="pet-detail__info">
                <div class="pet-info store-info">
                  <div class="pet-info__item">
                    <dt class="pet-info__label">住所</dt>
                    <dd class="pet-info__value">
                      {storeInfo.storePostCode && `〒${storeInfo.storePostCode}`}
                      {storeInfo.storeAddress && (
                        <div>{storeInfo.storeAddress}</div>
                      )}
                      {storeInfo.trafficInformation && (
                        <div class="traffic-info">{storeInfo.trafficInformation}</div>
                      )}
                    </dd>
                  </div>
                  
                  {storeInfo.businessHours && (
                    <div class="pet-info__item">
                      <dt class="pet-info__label">営業時間</dt>
                      <dd class="pet-info__value business-hours">{storeInfo.businessHours}</dd>
                    </div>
                  )}
                  
                  {storeInfo.storePhoneNumber && (
                    <div class="pet-info__item">
                      <dt class="pet-info__label">電話番号</dt>
                      <dd class="pet-info__value">
                        <a href={`tel:${storeInfo.storePhoneNumber.replace(/[^0-9]/g, '')}`} class="phone-link">
                          {storeInfo.storePhoneNumber}
                        </a>
                      </dd>
                    </div>
                  )}
                  
                  {storeInfo.storeLine && (
                    <div class="pet-info__item pet-info__item--line">
                      <dt class="pet-info__label">店舗LINE</dt>
                      <dd class="pet-info__value">
                        <a 
                          href={`https://lin.ee/${storeInfo.storeLine}`}
                          target="_blank"
                          rel="noopener noreferrer"
                          class="line-button"
                        >
                          <span class="line-button__line"></span>
                          <span class="line-button__text">{storeInfo.storeName}LINE</span>
                          <span class="line-button__icon">
                            <img src="/icons/icon_line-01.svg" alt="LINE" />
                          </span>
                        </a>
                      </dd>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>

          <!-- Googleマップ -->
          {storeInfo.storeMapHtml && (
            <div class="pet-detail__map">
              <div class="map-container" set:html={storeInfo.storeMapHtml}></div>
            </div>
          )}
        </div>
      </div>
    </section>

    {initialPets.length === 0 && (
      <section class="no-pets-section">
        <div class="container">
          <div class="no-pets-message">
            <p>この店舗には現在、表示できるペットがいません。</p>
            <p>最新情報については直接店舗にお問い合わせください。</p>
          </div>
        </div>
      </section>
    )}

    <!-- 店舗のDogs&Catsセクション -->
    {initialPets.length > 0 && (
      <section class="pets-section">
        <div class="container">
          <SectionHeading 
            subtitle="Dogs and Cats"
            title="Dogs&Cats"
            subtitleClass="text-disabled"
            titleClass="text-primary"
          />
          <PetTabs activeTab="all" />
          <div class="pets-count" id="pets-count">
            <span class="pets-count__number">{initialPets.length}</span><span class="pets-count__unit">件</span>
          </div>
          <div class="pets-grid" 
            data-all-pets={JSON.stringify(initialPets)}
            data-dogs={JSON.stringify(storeDogs)}
            data-cats={JSON.stringify(storeCats)}>
            {initialPets.map((pet) => (
              <PetCard pet={pet} />
            ))}
          </div>
        </div>
      </section>
    )}

    <!-- 関連コンテンツセクション -->
    <section class="related-content-section">
      <div class="container">
        <!-- ワンちゃん・ネコちゃんに会いたいボックス -->
        <div class="content-box">
          <h2 class="content-box__title">ワンちゃん・ネコちゃんに<br class="mobile-break">会いたい</h2>
          <div class="content-box__buttons">
            <a href="/flow" class="bg-button bg-button--flow">
              <div class="bg-button__overlay">
                <span class="bg-button__text">お迎えまでの流れ</span>
              </div>
            </a>
            <a href="/reserve" class="bg-button bg-button--reserve">
              <div class="bg-button__overlay">
                <span class="bg-button__text">来店予約をする</span>
              </div>
            </a>
          </div>
        </div>

        <!-- お客様の声セクション -->
        <div class="content-box voice-content-box">
          <h2 class="content-box__title">お客様の声</h2>
          <div class="voice-grid">
            {displayVoices.map((voice, index) => (
              <div class={`voice-card-wrapper ${index >= 1 ? 'voice-card--sm-only' : ''}`}>
                <VoiceCard
                  petName={voice.petName}
                  petGender={voice.petGender}
                  petThumbnail={voice.petThumbnail}
                  ownerName={voice.ownerName}
                  animalType={voice.animalType}
                  store={voice.store}
                  voiceContent={voice.voiceContent}
                  class="voice-card--compact"
                />
              </div>
            ))}
          </div>
          <ButtonWrapper>
            <BaseButton href="/voice" text="もっとみる" variant="short" />
          </ButtonWrapper>
        </div>

        <!-- カトレアの安心セクション -->
        <div class="content-box relief-content-box">
          <h2 class="content-box__title">カトレアの安心</h2>
          <div class="relief-section-inner">
            <div class="relief-img-wrap">
              <img src="/images/content/img_relief-main-01.webp" alt="カトレアの安心" class="relief-img" loading="lazy" />
            </div>
            
            <div class="relief-content">
              <p class="relief-desc">カトレアでは、専門獣医師による徹底した健康管理や、万が一の事態に備えた保証、そしてお迎え後も続くサポートを通じて、ペットとお客様が安心して過ごせる環境を提供しています。<br>健康状態の詳細な情報提供や、清潔な環境での飼育も心がけています。<br><br>ペットと家族が一生涯安心して一緒に過ごせるよう、全てのプロセスでサポートを続けています。</p>
              <ButtonWrapper>
                <BaseButton href="/relief" text="詳しくみる" variant="short" />
              </ButtonWrapper>
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- バナーセクション -->
    <BannerSection />

    <!-- お問い合わせCTAセクション -->
    <ContactCTASection />
  </main>

  <!-- JSON-LD構造化データ -->
  <script type="application/ld+json" set:html={JSON.stringify({
    "@context": "https://schema.org",
    "@type": "PetStore",
    "name": `Cattleya ${storeInfo.storeName}`,
    "url": Astro.url.toString(),
    "logo": "https://cattleya-pets.com/images/logo.png",
    "image": "https://cattleya-pets.com/og-image.png",
    "description": storeDescription,
    "address": {
      "@type": "PostalAddress",
      "postalCode": storeInfo.storePostCode || '',
      "addressRegion": "東京都",
      "addressLocality": storeInfo.storeAddress ? storeInfo.storeAddress.split('\n')[0] : '',
      "streetAddress": storeInfo.storeAddress ? storeInfo.storeAddress.replace(/\n/g, ' ') : ''
    },
    "geo": {
      "@type": "GeoCoordinates",
      "latitude": storeInfo.storeName === '新宿店' ? 35.6928 : storeInfo.storeName === '渋谷店' ? 35.6611 : 35.7305,
      "longitude": storeInfo.storeName === '新宿店' ? 139.7024 : storeInfo.storeName === '渋谷店' ? 139.6957 : 139.7153
    },
    "telephone": storeInfo.storePhoneNumber || '',
    "openingHours": storeInfo.businessHours ? storeInfo.businessHours.replace(/\n/g, ' ') : '',
    "priceRange": "$$"
  })}>
  </script>

  <!-- モーダル -->
  <div id="media-modal" class="media-modal">
    <div class="media-modal__overlay"></div>
    <div class="media-modal__content">
      <button class="media-modal__close" id="modal-close">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" width="24" height="24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
      
      <button class="media-modal__nav media-modal__nav--prev" id="modal-prev">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" width="24" height="24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
        </svg>
      </button>
      
      <button class="media-modal__nav media-modal__nav--next" id="modal-next">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" width="24" height="24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
        </svg>
      </button>
      
      <div class="media-modal__media" id="modal-media">
        <!-- メディアコンテンツがここに挿入されます -->
      </div>
    </div>
  </div>

</Layout>

<script define:vars={{ mediaItemsCount: mediaItems.length, mediaItems: mediaItems }}>

  // ページが読み込まれるまで待つ
  document.addEventListener('DOMContentLoaded', function() {
    console.log('🚀 Store page initialized with HTML5 video support');
    
    // メディアアイテムデータを準備（Astroから渡される）
    const mediaItemsData = mediaItems;
    const mediaItemsCount = mediaItems.length;
    
    console.log('🎯 Found media items:', mediaItemsData.length);
    console.log('🎯 Media items data:', mediaItemsData);
    
    let currentSlide = 0;
    let currentModalSlide = 0;
    
    const slides = document.querySelectorAll('.carousel__slide');
    const thumbnails = document.querySelectorAll('.carousel__thumbnail');
    const prevBtn = document.getElementById('prevBtn');
    const nextBtn = document.getElementById('nextBtn');
    
    console.log(`🎯 Found ${slides.length} slides, ${thumbnails.length} thumbnails`);
    
    // モーダル要素
    const modal = document.getElementById('media-modal');
    const modalMedia = document.getElementById('modal-media');
    const modalClose = document.getElementById('modal-close');
    const modalOverlay = modal?.querySelector('.media-modal__overlay');
    const modalPrev = document.getElementById('modal-prev');
    const modalNext = document.getElementById('modal-next');

    function showSlide(index) {
      slides.forEach((slide, i) => {
        slide.classList.toggle('carousel__slide--active', i === index);
        
        // HTML5 video要素の制御
        const video = slide.querySelector('.carousel__video');
        const playBtn = slide.querySelector('.carousel__video-play-btn');
        
        if (video && video.dataset.videoSrc) {
          if (i === index) {
            // アクティブなスライドでは動画URLを設定、再生ボタンを表示
            const videoUrl = video.dataset.videoSrc;
            console.log('🎬 Loading main carousel video with URL:', videoUrl);
            video.src = videoUrl;
            
            // メタデータ読み込み後に最初のフレームを表示
            video.addEventListener('loadedmetadata', () => {
              console.log('🎬 Main carousel video metadata loaded');
              video.currentTime = 0.5; // 0.5秒地点のフレームを表示
            });
            
            video.addEventListener('seeked', () => {
              console.log('🎬 Main carousel video seeked to first frame');
              video.pause(); // 最初のフレームで一時停止
            });
            
            if (playBtn) playBtn.style.display = 'flex';
          } else {
            // 非アクティブなスライドの動画をリセット
            video.src = '';
            video.pause();
            if (playBtn) playBtn.style.display = 'flex';
          }
        }
      });

      // サムネイルを切り替え
      thumbnails.forEach((thumb, i) => {
        thumb.classList.toggle('carousel__thumbnail--active', i === index);
      });

      currentSlide = index;
    }

    function nextSlide() {
      const next = (currentSlide + 1) % mediaItemsCount;
      showSlide(next);
    }

    function prevSlide() {
      const prev = (currentSlide - 1 + mediaItemsCount) % mediaItemsCount;
      showSlide(prev);
    }

    // カルーセルイベントリスナー
    if (prevBtn) {
      prevBtn.addEventListener('click', (e) => {
        e.preventDefault();
        console.log('Prev button clicked');
        prevSlide();
      });
    }
    
    if (nextBtn) {
      nextBtn.addEventListener('click', (e) => {
        e.preventDefault();
        console.log('Next button clicked');
        nextSlide();
      });
    }

    // サムネイルクリック
    thumbnails.forEach((thumb, index) => {
      thumb.addEventListener('click', (e) => {
        e.preventDefault();
        console.log('Thumbnail clicked:', index);
        showSlide(index);
      });
    });

    // モーダル機能
    function openModal(mediaItem, slideIndex = currentSlide) {
      console.log('Opening modal with media:', mediaItem);
      console.log('🎯 Modal slide index:', slideIndex);
      if (!modal || !modalMedia) return;
      
      currentModalSlide = slideIndex;
      console.log('🎯 Updated currentModalSlide to:', currentModalSlide);
      updateModalNavButtons();
      
      modalMedia.innerHTML = '';
      
      if (mediaItem.type === 'image') {
        const img = document.createElement('img');
        img.src = mediaItem.url;
        img.alt = mediaItem.alt;
        img.className = 'media-modal__image store-modal-image'; // 店舗用の追加クラス
        // 店舗詳細ページ専用：横4:縦3のアスペクト比を直接適用
        img.style.aspectRatio = '4 / 3';
        img.style.height = 'auto';
        img.style.objectFit = 'cover';
        img.style.borderRadius = '8px';
        
        // レスポンシブ対応の強制スタイル適用
        function applyResponsiveStyles() {
          const screenWidth = window.innerWidth;
          if (screenWidth >= 1280) { // xl
            img.style.width = 'min(90vw, 85vh)';
            img.style.height = 'auto';
            img.style.maxWidth = '90vw';
            img.style.maxHeight = '90vh';
          } else if (screenWidth >= 1024) { // lg
            img.style.width = 'min(85vw, 80vh)';
            img.style.height = 'auto';
            img.style.maxWidth = '85vw';
            img.style.maxHeight = '85vh';
          } else if (screenWidth >= 768) { // md
            img.style.width = 'min(85vw, 75vh)';
            img.style.height = 'auto';
            img.style.maxWidth = '85vw';
            img.style.maxHeight = '85vh';
          } else if (screenWidth >= 640) { // sm
            img.style.width = 'min(85vw, 63.75vh)';
            img.style.height = 'auto';
            img.style.maxWidth = '85vw';
            img.style.maxHeight = '85vh';
          } else {
            img.style.width = 'min(90vw, 67.5vh)';
            img.style.height = 'auto';
            img.style.maxWidth = '90vw';
            img.style.maxHeight = '90vh';
          }
        }
        
        applyResponsiveStyles();
        window.addEventListener('resize', applyResponsiveStyles);
        // 画像要素にタッチイベントを直接設定
        img.addEventListener('touchstart', (e) => {
          console.log('🎯 Image touchstart detected');
          modalTouchStartX = e.touches[0].clientX;
          console.log('🎯 Touch start X:', modalTouchStartX);
          e.preventDefault(); // デフォルト動作を防ぐ
          e.stopPropagation(); // イベント伝播を停止
        });

        img.addEventListener('touchend', (e) => {
          console.log('🎯 Image touchend detected');
          modalTouchEndX = e.changedTouches[0].clientX;
          console.log('🎯 Touch end X:', modalTouchEndX);
          console.log('🎯 Swipe distance:', modalTouchEndX - modalTouchStartX);
          handleModalSwipe();
          e.preventDefault(); // デフォルト動作を防ぐ
          e.stopPropagation(); // イベント伝播を停止
        });

        img.addEventListener('touchmove', (e) => {
          console.log('🎯 Image touchmove detected');
          e.preventDefault(); // スクロールを防ぐ
          e.stopPropagation(); // イベント伝播を停止
        });
        
        console.log('🖼️ Store modal image created with class:', img.className);
        modalMedia.appendChild(img);
      } else if (mediaItem.type === 'video') {
        const video = document.createElement('video');
        video.src = mediaItem.url;
        video.className = 'media-modal__video store-modal-video'; // 店舗用の追加クラス
        video.controls = true;
        video.preload = 'metadata';
        video.playsInline = true;
        video.muted = false; // モーダルでは音声ありで再生
        // 店舗詳細ページ専用：横4:縦3のアスペクト比を直接適用
        video.style.aspectRatio = '4 / 3';
        video.style.height = 'auto';
        video.style.objectFit = 'cover';
        video.style.borderRadius = '8px';
        
        // レスポンシブ対応の強制スタイル適用
        function applyVideoResponsiveStyles() {
          const screenWidth = window.innerWidth;
          if (screenWidth >= 1280) { // xl
            video.style.width = 'min(90vw, 85vh)';
            video.style.height = 'auto';
            video.style.maxWidth = '90vw';
            video.style.maxHeight = '90vh';
          } else if (screenWidth >= 1024) { // lg
            video.style.width = 'min(85vw, 80vh)';
            video.style.height = 'auto';
            video.style.maxWidth = '85vw';
            video.style.maxHeight = '85vh';
          } else if (screenWidth >= 768) { // md
            video.style.width = 'min(85vw, 75vh)';
            video.style.height = 'auto';
            video.style.maxWidth = '85vw';
            video.style.maxHeight = '85vh';
          } else if (screenWidth >= 640) { // sm
            video.style.width = 'min(85vw, 63.75vh)';
            video.style.height = 'auto';
            video.style.maxWidth = '85vw';
            video.style.maxHeight = '85vh';
          } else {
            video.style.width = 'min(90vw, 67.5vh)';
            video.style.height = 'auto';
            video.style.maxWidth = '90vw';
            video.style.maxHeight = '90vh';
          }
        }
        
        applyVideoResponsiveStyles();
        window.addEventListener('resize', applyVideoResponsiveStyles);
        
        // モーダルで動画を自動再生開始
        video.play().then(() => {
          console.log('🎬 Modal video autoplay started');
        }).catch((error) => {
          console.log('🎬 Modal video autoplay failed:', error);
        });
        
        // 動画要素にタッチイベントを直接設定
        video.addEventListener('touchstart', (e) => {
          console.log('🎯 Video touchstart detected');
          modalTouchStartX = e.touches[0].clientX;
          console.log('🎯 Touch start X:', modalTouchStartX);
          e.preventDefault(); // デフォルト動作を防ぐ
          e.stopPropagation(); // イベント伝播を停止
        });

        video.addEventListener('touchend', (e) => {
          console.log('🎯 Video touchend detected');
          modalTouchEndX = e.changedTouches[0].clientX;
          console.log('🎯 Touch end X:', modalTouchEndX);
          console.log('🎯 Swipe distance:', modalTouchEndX - modalTouchStartX);
          handleModalSwipe();
          e.preventDefault(); // デフォルト動作を防ぐ
          e.stopPropagation(); // イベント伝播を停止
        });

        video.addEventListener('touchmove', (e) => {
          console.log('🎯 Video touchmove detected');
          e.preventDefault(); // スクロールを防ぐ
          e.stopPropagation(); // イベント伝播を停止
        });
        
        console.log('🎬 Store modal video created with class:', video.className);
        modalMedia.appendChild(video);
      }
      
      modal.classList.add('media-modal--active');
      document.body.style.overflow = 'hidden';
      console.log('Modal opened');
    }

    function closeModal() {
      if (!modal) return;
      
      // モーダル内の動画を停止
      const modalVideo = modalMedia?.querySelector('video');
      if (modalVideo) {
        modalVideo.pause();
        modalVideo.currentTime = 0;
        console.log('🎬 Modal video stopped');
      }
      
      modal.classList.remove('media-modal--active');
      document.body.style.overflow = '';
      if (modalMedia) modalMedia.innerHTML = '';
      console.log('Modal closed');
    }

    function updateModalNavButtons() {
      // 循環ナビゲーションのため常に有効にする
      if (modalPrev) {
        modalPrev.disabled = false;
        modalPrev.style.opacity = '1';
      }
      if (modalNext) {
        modalNext.disabled = false;
        modalNext.style.opacity = '1';
      }
    }

    function showModalSlide(index) {
      if (index >= 0 && index < mediaItemsData.length) {
        const mediaItem = mediaItemsData[index];
        openModal(mediaItem, index);
      }
    }

    function nextModalSlide() {
      console.log('🎯 nextModalSlide called, current:', currentModalSlide, 'max:', mediaItemsCount - 1);
      const nextIndex = (currentModalSlide + 1) % mediaItemsCount;
      showModalSlide(nextIndex);
    }

    function prevModalSlide() {
      console.log('🎯 prevModalSlide called, current:', currentModalSlide);
      const prevIndex = (currentModalSlide - 1 + mediaItemsCount) % mediaItemsCount;
      showModalSlide(prevIndex);
    }

    // メインカルーセルクリック時にモーダル表示
    slides.forEach((slide, index) => {
      slide.addEventListener('click', (e) => {
        // ナビゲーションボタンのクリックは無視
        if (e.target.closest('.carousel__nav')) {
          console.log('Navigation button clicked, ignoring');
          return;
        }
        
        console.log('🎯 Slide clicked, current slide index:', currentSlide);
        // 現在表示されているスライドに対応するメディアアイテムを取得
        const currentMedia = mediaItemsData[currentSlide];
        if (currentMedia) {
          console.log('🎯 Opening modal for media:', currentMedia.type, currentMedia.url);
          openModal(currentMedia, currentSlide);
        }
      });
    });

    // モーダルイベントリスナー
    if (modalClose) modalClose.addEventListener('click', closeModal);
    if (modalOverlay) modalOverlay.addEventListener('click', closeModal);
    if (modalPrev) modalPrev.addEventListener('click', prevModalSlide);
    if (modalNext) modalNext.addEventListener('click', nextModalSlide);

    // キーボードイベント
    document.addEventListener('keydown', (e) => {
      if (modal && modal.classList.contains('media-modal--active')) {
        if (e.key === 'Escape') {
          closeModal();
        } else if (e.key === 'ArrowLeft') {
          prevModalSlide();
        } else if (e.key === 'ArrowRight') {
          nextModalSlide();
        }
      } else {
        if (e.key === 'ArrowLeft') prevSlide();
        if (e.key === 'ArrowRight') nextSlide();
      }
    });

    // モーダル内でのタッチスワイプサポート（ペット詳細ページと同じ実装）
    let modalTouchStartX = 0;
    let modalTouchEndX = 0;
    const minSwipeDistance = 50;

    function handleModalSwipe() {
      const swipeDistance = modalTouchEndX - modalTouchStartX;
      console.log('🎯 Swipe distance calculated:', swipeDistance);
      console.log('🎯 Min swipe distance:', minSwipeDistance);
      console.log('🎯 Swipe detected:', Math.abs(swipeDistance) > minSwipeDistance);
      
      if (Math.abs(swipeDistance) > minSwipeDistance) {
        if (swipeDistance > 0) {
          console.log('🎯 Right swipe - going to previous slide');
          prevModalSlide();
        } else {
          console.log('🎯 Left swipe - going to next slide');
          nextModalSlide();
        }
      } else {
        console.log('🎯 Swipe distance too small, ignoring');
      }
    }

    // 重複するイベントリスナーを削除し、画像・動画要素に直接設定したもののみ使用

    // タッチスワイプサポート
    let touchStartX = 0;
    let touchEndX = 0;
    
    const carouselContainer = document.getElementById('carousel-container');
    if (carouselContainer) {
      carouselContainer.addEventListener('touchstart', (e) => {
        touchStartX = e.changedTouches[0].screenX;
      });
      
      carouselContainer.addEventListener('touchend', (e) => {
        touchEndX = e.changedTouches[0].screenX;
        const swipeThreshold = 50;
        const swipeDistance = touchStartX - touchEndX;
        
        if (Math.abs(swipeDistance) > swipeThreshold) {
          if (swipeDistance > 0) {
            nextSlide();
          } else {
            prevSlide();
          }
        }
      });
    }

    // Googleマップ調整
    function adjustMapSize() {
      const mapContainer = document.querySelector('.map-container');
      if (mapContainer) {
        const iframe = mapContainer.querySelector('iframe');
        if (iframe) {
          iframe.style.width = '100%';
          iframe.style.height = '360px';
          iframe.setAttribute('width', '100%');
          iframe.setAttribute('height', '360');
        }
      }
    }
    
    setTimeout(adjustMapSize, 100);
    setTimeout(adjustMapSize, 500);
    setTimeout(adjustMapSize, 1000);

    // サムネイル動画の最初のフレームを表示（ペット詳細ページと同じ実装）
    function loadVideoThumbnails() {
      const thumbnailVideos = document.querySelectorAll('.carousel__thumbnail-video-element[data-video-src]');
      console.log('🎬 Found thumbnail videos:', thumbnailVideos.length);
      
      thumbnailVideos.forEach((video, index) => {
        const videoUrl = video.dataset.videoSrc;
        if (videoUrl) {
          console.log(`🎬 Loading thumbnail for video ${index}:`, videoUrl);
          
          // 動画のsrcを設定
          video.src = videoUrl;
          
          // メタデータが読み込まれたら適切なフレームに移動
          video.addEventListener('loadedmetadata', () => {
            console.log(`🎬 Video ${index} metadata loaded, duration: ${video.duration}s`);
            // 動画の長さに応じて適切な位置を選択（最初の10%か1秒のいずれか短い方）
            const seekTime = Math.min(video.duration * 0.1, 1.0);
            video.currentTime = seekTime;
            console.log(`🎬 Seeking to ${seekTime}s`);
          });
          
          // フレームが読み込まれたら一時停止
          video.addEventListener('seeked', () => {
            console.log(`🎬 Video ${index} seeked to first frame`);
            video.pause();
            // 背景色をクリアして動画を見えるようにする
            video.style.backgroundColor = 'transparent';
          });
          
          // エラーハンドリング
          video.addEventListener('error', (e) => {
            console.error(`🎬 Error loading thumbnail video ${index}:`, e);
          });
        }
      });
    }

    // 初期表示（ペット詳細ページと同じ順序）
    showSlide(0);
    
    // サムネイル動画を初期化
    setTimeout(loadVideoThumbnails, 100);
    
    console.log('✅ All event listeners set up with HTML5 video support');

    // ペットタブ機能（searchページと同じ）
    const tabButtons = document.querySelectorAll('.pet-tabs__item');
    const petsGrid = document.querySelector('.pets-grid');
    const allStorePets = JSON.parse(petsGrid?.dataset.allPets || '[]');
    const storeDogs = JSON.parse(petsGrid?.dataset.dogs || '[]');
    const storeCats = JSON.parse(petsGrid?.dataset.cats || '[]');

    // ペットカードのテンプレート関数
    function generatePetCard(pet) {
      // getImageUrlのロジックを直接実装
      const imageUrl = pet.imageUrl01 ? `${pet.imageUrl01}?w=600&h=600&fit=crop` : '/images/ui/img_loading-pet-image-01.webp';
      const breedTypeEn = (pet.breedTypeEn || '').toLowerCase();
      const genderIcon = pet.gender === '男の子' 
        ? '<span class="pet-card__gender male"><svg width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M15 0V5H14V1.733L8.871 6.817C9.201 7.297 9.47167 7.80367 9.683 8.337C9.89433 8.87033 10 9.42467 10 10C10 11.394 9.51533 12.576 8.546 13.546C7.57667 14.516 6.39533 15.0007 5.002 15C3.60867 14.9993 2.42667 14.5147 1.456 13.546C0.485333 12.5773 0 11.396 0 10.002C0 8.608 0.485 7.426 1.455 6.456C2.425 5.486 3.60667 5.00067 5 5C5.576 5 6.12733 5.105 6.654 5.315C7.18067 5.52433 7.682 5.79567 8.158 6.129L13.287 1H10V0H15ZM4.997 6C3.89167 6 2.949 6.39067 2.169 7.172C1.38967 7.954 1 8.89767 1 10.003C1 11.109 1.39067 12.0517 2.172 12.831C2.954 13.6103 3.89767 14 5.003 14C6.109 14 7.05167 13.6093 7.831 12.828C8.61033 12.046 9 11.1023 9 9.997C9 8.89167 8.60933 7.949 7.828 7.169C7.04667 6.389 6.103 5.99933 4.997 6Z" fill="#7398D5"/></svg></span>'
        : pet.gender === '女の子' 
          ? '<span class="pet-card__gender female"><svg width="10" height="16" viewBox="0 0 10 16" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M4.5 16V14H2.5V13H4.5V9.977C3.222 9.83367 2.15233 9.288 1.291 8.34C0.430334 7.39133 0 6.27433 0 4.989C0 3.60033 0.486333 2.42167 1.459 1.453C2.431 0.484333 3.61133 0 5 0C6.38867 0 7.569 0.484333 8.541 1.453C9.513 2.42167 9.99933 3.60033 10 4.989C10 6.27433 9.56967 7.391 8.709 8.339C7.84767 9.28767 6.778 9.83367 5.5 9.977V13H7.5V14H5.5V16H4.5ZM5.003 9C6.109 9 7.05167 8.60933 7.831 7.828C8.61033 7.046 9 6.10233 9 4.997C9 3.89167 8.60933 2.949 7.828 2.169C7.04667 1.389 6.103 0.999333 4.997 1C3.891 1.00067 2.94833 1.39133 2.169 2.172C1.38967 2.954 1 3.89767 1 5.003C1 6.109 1.39067 7.05167 2.172 7.831C2.954 8.61033 3.89767 9 5.003 9Z" fill="#D55665"/></svg></span>'
          : '';
      
      return `
        <div class="pet-card" data-animal-type="${pet.animalType}">
          <a href="/search/${pet.animalType}s/${pet.classification === 'mix' ? 'mix/' : ''}${encodeURIComponent(breedTypeEn)}/${pet.id || pet.contentId}" class="pet-card__link">
            <div class="pet-card__inner">
              <div class="pet-card__image-container">
                <img
                  class="pet-card__image"
                  src="${imageUrl}"
                  alt="${pet.breedTypeJa}の写真"
                  loading="lazy"
                  width="600"
                  height="600"
                  onerror="this.src='/images/ui/img_loading-pet-image-01.webp'"
                />
              </div>
              <div class="pet-card__info">
                <h3 class="pet-card__title">
                  ${pet.breedTypeJa}
                  ${genderIcon}
                </h3>
                <div class="pet-card__details">
                  <p class="pet-card__detail-item">カラー：${pet.color}</p>
                  <p class="pet-card__detail-item">誕生日：${pet.birthday ? new Date(pet.birthday).toLocaleDateString('ja-JP', { year: 'numeric', month: 'numeric', day: 'numeric' }).replace(/\//g, '/') : '未設定'}</p>
                  <p class="pet-card__detail-item">店舗：${pet.storeName}</p>
                </div>
              </div>
            </div>
          </a>
        </div>
      `;
    }

    // ペット表示を更新する関数
    function updatePetsDisplay(selectedTab) {
      const dataMap = { all: allStorePets, dog: storeDogs, cat: storeCats };
      const currentPets = dataMap[selectedTab] || [];

      if (petsGrid) {
        // DocumentFragmentを使用してDOMの更新を最適化
        const fragment = document.createDocumentFragment();
        const tempDiv = document.createElement('div');
        tempDiv.innerHTML = currentPets.map(generatePetCard).join('');
        
        while (tempDiv.firstChild) {
          fragment.appendChild(tempDiv.firstChild);
        }
        
        petsGrid.replaceChildren(fragment);
      }

      // 件数表示を更新
      const petsCountElement = document.getElementById('pets-count');
      if (petsCountElement) {
        const numberElement = petsCountElement.querySelector('.pets-count__number');
        if (numberElement) {
          numberElement.textContent = currentPets.length.toString();
        }
      }
    }

    // 初期表示時に現在のアクティブタブに応じたペットを表示
    const activeButton = document.querySelector('.pet-tabs__item--active');
    if (activeButton) {
      const initialTab = activeButton.dataset.tab || 'all';
      updatePetsDisplay(initialTab);
    }

    tabButtons.forEach(button => {
      button.addEventListener('click', () => {
        if (button.classList.contains('pet-tabs__item--active')) return;
        
        // ステート更新を最小化
        tabButtons.forEach(btn => btn.classList.remove('pet-tabs__item--active'));
        button.classList.add('pet-tabs__item--active');

        const selectedTab = button.dataset.tab;
        updatePetsDisplay(selectedTab);
      });
    });
  });
</script>

<style lang="scss">
@use '../../styles/mixins' as *;
@use '../../styles/variables' as *;
@use '../../styles/tokens/typography' as *;

  .store-detail .pet-info__value .traffic-info {
    font-size: 0.9em;
    color: #666;
    margin-top: 0.25rem;
  }
  
  .phone-link {
    color: inherit;
    text-decoration: none;
  }
  
  .phone-link:hover {
    text-decoration: underline;
  }
  
  .business-hours {
    white-space: pre-line;
  }
  
  /* LINEボタン専用スタイル（BaseButton shortデザイン準拠） */
  .line-button {
    display: inline-flex;
    align-items: center;
    border: 1px solid #00C300;
    border-radius: 4px;
    padding: rem(30) rem(75) rem(30) rem(55);
    text-decoration: none;
    color: #00C300;
    cursor: pointer;
    position: relative;
    transition: all 0.3s ease;
    min-width: rem(230);
    background-color: #fff;
    
    &:hover {
      text-decoration: none;
      
      .line-button__line {
        transform: translateX(rem(15));
      }
    }
  }
  
  .line-button__line {
    position: absolute;
    left: rem(-30);
    width: rem(40);
    height: 1px;
    background-color: #00C300;
    transition: transform 0.3s ease;
    flex-shrink: 0;
  }
  
  .line-button__text {
    @include typography-ja-s($font-weight-semibold);
    color: #00C300;
    text-align: center;
    width: 100%;
    white-space: nowrap;
  }
  
  .line-button__icon {
    position: absolute;
    right: rem(30);
    top: 50%;
    transform: translateY(-50%);
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: rem(20);
    height: rem(20);
    
    img {
      width: 100%;
      height: 100%;
    }
  }
  
  /* 店舗LINE項目のモバイル専用レイアウト */
  .pet-info__item--line {
    flex-direction: column;
    gap: rem(30);
    padding-bottom: rem(20);
    
    @include breakpoint-up(sm) {
      flex-direction: row;
      gap: initial;
    }
    
    .pet-info__label {
      align-self: flex-start;
      
      @include breakpoint-up(sm) {
        align-self: initial;
      }
    }
    
    .pet-info__value {
      display: flex;
      justify-content: center;
      
      @include breakpoint-up(sm) {
        display: initial;
        justify-content: initial;
      }
    }
  }
  
  /* Googleマップ */
  .pet-detail__map {
    width: 100%;
    margin-top: rem(40);
    
    @include breakpoint-up(sm) {
      margin-top: rem(60);
    }
  }
  
  .map-container {
    width: 100%;
    height: rem(360);
    border-radius: rem(8);
    overflow: hidden;
    
    > iframe {
      width: 100% !important;
      height: 100% !important;
      max-width: 100% !important;
      max-height: rem(360) !important;
      min-width: 100% !important;
      min-height: rem(360) !important;
      border: none !important;
      display: block !important;
    }
  }
  
  /* より強力なセレクタでiframeを対象 */
  .pet-detail__map .map-container iframe {
    width: 100% !important;
    height: rem(360) !important;
    max-width: 100% !important;
    max-height: rem(360) !important;
    min-width: 100% !important;
    min-height: rem(360) !important;
    border: none !important;
    display: block !important;
  }
  
  /* モバイル専用改行 */
  .mobile-break {
    @include breakpoint-up(sm) {
      display: none;
    }
  }
  
  .carousel__video-container {
    position: relative;
    width: 100%;
    height: 100%;
  }
  
  .carousel__video {
    width: 100%;
    height: 100%;
    object-fit: cover;
    cursor: pointer;
  }
  
  .carousel__video-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: none;
    align-items: center;
    justify-content: center;
    background: rgba(0, 0, 0, 0.3);
    cursor: pointer;
    z-index: 10;
  }
  
  .carousel__video-play-btn {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: rem(80);
    height: rem(80);
    background-color: rgba(0, 0, 0, 0.7);
    border: none;
    border-radius: 50%;
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease, opacity 0.3s ease, visibility 0.3s ease;
    z-index: 10;
    pointer-events: none; // 装飾のみ、クリック不可
    
    @include breakpoint-up(lg) {
      width: rem(100);
      height: rem(100);
    }
    
    svg {
      margin-left: rem(4);
      width: rem(32);
      height: rem(32);
      
      @include breakpoint-up(lg) {
        width: rem(48);
        height: rem(48);
        margin-left: rem(6);
      }
    }
  }
  
  .carousel__video-container:hover .carousel__video-play-btn {
    background-color: rgba(0, 0, 0, 0.9);
    transform: translate(-50%, -50%) scale(1.1);
  }
  
  .carousel__thumbnail-video-element {
    width: 100%;
    height: 100%;
    object-fit: cover;
    pointer-events: none; /* サムネイル動画はクリック不可 */
    background-color: #f0f0f0; /* ローディング中の背景色 */
    border-radius: rem(4);
    
    @include breakpoint-up(md) {
      border-radius: rem(8);
    }
  }
  
  .carousel__video-fallback {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    text-align: center;
    background: rgba(0, 0, 0, 0.7);
    color: white;
    padding: 1rem;
    border-radius: 8px;
  }
  
  .carousel__video-fallback a {
    color: #00C300;
    text-decoration: none;
  }
  
  .carousel__video-fallback a:hover {
    text-decoration: underline;
  }
  
  /* No pets section */
  .no-pets-section {
    padding: rem(40) 0;
    background: #f8f7f5;
    
    @include breakpoint-up(sm) {
      padding: rem(60) 0;
    }
  }
  
  .no-pets-message {
    text-align: center;
    max-width: rem(600);
    margin: 0 auto;
    padding: rem(20);
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    
    @include breakpoint-up(sm) {
      padding: rem(40);
    }
  }
  
  .no-pets-message p {
    margin: 0 0 rem(16) 0;
    color: #666;
    line-height: 1.6;
  }
  
  .no-pets-message p:last-child {
    margin: 0;
  }
  
  /* Loading animation for images */
  .carousel__image,
  .pet-card__image {
    transition: opacity 0.3s ease;
  }
  
  .carousel__image[style*="opacity: 0"],
  .pet-card__image[style*="opacity: 0"] {
    background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
    background-size: 200% 100%;
    animation: loading 1.5s infinite;
  }
  
  @keyframes loading {
    0% {
      background-position: 200% 0;
    }
    100% {
      background-position: -200% 0;
    }
  }

  /* モーダルスタイル（ペット詳細ページと同じ） */
  .media-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 9999;
    display: none;
    
    &--active {
      display: flex;
      align-items: center;
      justify-content: center;
    }
  }

  .media-modal__overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.8);
    cursor: pointer;
  }

  .media-modal__content {
    position: relative;
    max-width: 95vw;
    max-height: 95vh;
    z-index: 1;
    border-radius: rem(8);
  }

  .media-modal__close {
    position: absolute;
    // すべてのサイズで動画内側の右上に配置
    top: rem(8);
    right: rem(8);
    width: rem(32);
    height: rem(32);
    background-color: rgba(255, 255, 255, 0.9);
    border: none;
    border-radius: 50%;
    color: #333;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s ease;
    z-index: 10; // 動画の上に表示
    
    @include breakpoint-up(sm) {
      top: rem(12);
      right: rem(12);
      width: rem(36);
      height: rem(36);
    }
    
    @include breakpoint-up(lg) {
      top: rem(16);
      right: rem(16);
      width: rem(40);
      height: rem(40);
    }
    
    &:hover {
      background-color: rgba(255, 255, 255, 1);
      transform: scale(1.1);
    }
    
    svg {
      width: rem(16);
      height: rem(16);
      
      @include breakpoint-up(sm) {
        width: rem(18);
        height: rem(18);
      }
      
      @include breakpoint-up(lg) {
        width: rem(20);
        height: rem(20);
      }
    }
  }

  .media-modal__nav {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    width: rem(36);
    height: rem(36);
    border-radius: 50%;
    background-color: #fff;
    border: 1px solid #ccc;
    color: #666;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    z-index: 11;
    transition: all 0.3s ease;
    padding: 0;
    
    @include breakpoint-up(sm) {
      width: rem(40);
      height: rem(40);
    }
    
    @include breakpoint-up(lg) {
      width: rem(44);
      height: rem(44);
    }
    
    &:hover {
      background-color: #f8f9fa;
      color: #333;
    }
    
    &:disabled {
      opacity: 0.5;
      cursor: not-allowed;
      
      &:hover {
        background-color: #fff;
        color: #666;
      }
    }
    
    &--prev {
      left: rem(-10);
      
      @include breakpoint-up(sm) {
        left: rem(-20);
      }
    }
    
    &--next {
      right: rem(-10);
      
      @include breakpoint-up(sm) {
        right: rem(-20);
      }
    }
    
    svg {
      width: 24px;
      height: 24px;
    }
  }

  .media-modal__media {
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .media-modal__image {
    // 横4:縦3の固定比率で画面内最大サイズ表示
    aspect-ratio: 4 / 3 !important; // 横4:縦3を強制適用
    object-fit: cover; // 画像をフレーム内でトリミング表示
    border-radius: rem(8);
    height: auto !important; // heightを自動計算に強制
    
    // aspect-ratioを有効にするためwidthのみ指定
    width: min(90vw, 67.5vh);
    max-width: 90vw;
    max-height: 90vh;
    
    @include breakpoint-up(sm) {
      width: min(85vw, 63.75vh);
      max-width: 85vw;
      max-height: 85vh;
    }
    
    @include breakpoint-up(md) {
      width: min(70vw, 56.25vh);
      max-width: 70vw;
      max-height: 75vh;
    }
    
    @include breakpoint-up(lg) {
      width: min(80vw, 60vh);
      max-width: 80vw;
      max-height: 80vh;
    }
  }

  .media-modal__video {
    border: none;
    border-radius: rem(8);
    display: block;
    object-fit: cover; // 黒い余白を完全に除去
    
    // 横4:縦3の固定比率で画面内最大サイズ表示
    aspect-ratio: 4 / 3 !important; // 横4:縦3を強制適用
    height: auto !important; // heightを自動計算に強制
    
    // aspect-ratioを有効にするためwidthのみ指定
    width: min(90vw, 67.5vh);
    max-width: 90vw;
    max-height: 90vh;
    
    @include breakpoint-up(sm) {
      width: min(85vw, 63.75vh);
      max-width: 85vw;
      max-height: 85vh;
    }
    
    @include breakpoint-up(md) {
      width: min(70vw, 56.25vh);
      max-width: 70vw;
      max-height: 75vh;
    }
    
    @include breakpoint-up(lg) {
      width: min(80vw, 60vh);
      max-width: 80vw;
      max-height: 80vh;
    }
  }

  /* 店舗詳細ページ専用のモーダルクラス */
  .store-modal-image,
  .store-modal-video {
    aspect-ratio: 4 / 3 !important;
    height: auto !important;
    object-fit: cover !important;
    border-radius: rem(8) !important;
    width: min(90vw, 67.5vh) !important;
    max-width: 90vw !important;
    max-height: 90vh !important;
  }

  /* ホバーエフェクト */
  .carousel__image--clickable:hover,
  .carousel__video-container--clickable:hover {
    transform: scale(1.02);
    transition: transform 0.3s ease;
  }

  .carousel__image--clickable:hover::after,
  .carousel__video-container--clickable:hover::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(255, 255, 255, 0.1);
    pointer-events: none;
  }
</style>
</Layout>