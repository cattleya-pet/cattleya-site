---
import Layout from '../../layouts/Layout.astro';
import BannerSection from '../../components/sections/common/BannerSection.astro';
import ContactCTASection from '../../components/sections/common/ContactCTASection.astro';
import HeroSection from '../../components/sections/common/HeroSection.astro';
import phoneIcon from '../../assets/icons/icon_store-phone-01.svg';
import lineIcon from '../../assets/icons/icon_line-01.svg';
import mailIcon from '../../assets/icons/icon_store-mail-01.svg';
import { getAllStores } from '../../lib/api/stores';
import { getAllLatestPets } from '../../lib/api/pets/queries';

// 店舗データを取得
const stores = await getAllStores();
// ペットデータを取得（ランダムIDによる順序）
const pets = await getAllLatestPets();

// パンくずリストのデータ
const breadcrumbItems = [
  { label: 'ホーム', href: '/' },
  { label: 'お問い合わせ' }
];
---

<Layout title="お問い合わせ | カトレア" description="カトレアへのお問い合わせ方法をご案内します。お電話、LINE、メールからお気軽にご連絡ください。">
  <main>
    <HeroSection 
      title="お問い合わせ"
      image="/images/backgrounds/img_bg-hero_contact-01.webp"
      breadcrumbItems={breadcrumbItems}
    />

    <!-- 問い合わせ方法選択セクション -->
    <section class="contact-methods-section">
      <div class="container">
        <div class="contact-methods-description">
          <p>来店予約や、ワンちゃん・ネコちゃんのお問い合わせ等がございましたら、お気軽にお電話、LINE、または下記お問い合わせフォームからお問い合わせください。</p>
        </div>
        <div class="contact-methods">
          <!-- お電話で問い合わせる -->
          <a href="#phone-contact" class="contact-method-link">
            <div class="contact-method-link__inner">
              <div class="contact-method-link__icon">
                <img src={phoneIcon.src} alt="電話アイコン" />
              </div>
              <div class="contact-method-link__text">お電話で<br>問い合わせる</div>
              <div class="contact-method-link__arrow">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M6 9L12 15L18 9" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
              </div>
            </div>
          </a>

          <!-- LINEで問い合わせる -->
          <a href="#line-contact" class="contact-method-link contact-method-link--line">
            <div class="contact-method-link__inner">
              <div class="contact-method-link__icon">
                <img src={lineIcon.src} alt="LINEアイコン" />
              </div>
              <div class="contact-method-link__text">LINEで<br>問い合わせる</div>
              <div class="contact-method-link__arrow">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M6 9L12 15L18 9" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
              </div>
            </div>
          </a>

          <!-- メールで問い合わせる -->
          <a href="#mail-contact" class="contact-method-link">
            <div class="contact-method-link__inner">
              <div class="contact-method-link__icon">
                <img src={mailIcon.src} alt="メールアイコン" />
              </div>
              <div class="contact-method-link__text">メールで<br>問い合わせる</div>
              <div class="contact-method-link__arrow">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M6 9L12 15L18 9" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
              </div>
            </div>
          </a>
        </div>
      </div>
    </section>

    <!-- お電話セクション -->
    <section id="phone-contact" class="phone-contact-section">
      <div class="container">
        <h2 class="phone-contact-title">お電話</h2>
        <div class="phone-contact-buttons">
          {stores.map((store) => (
            <a href={`tel:${store.storePhoneNumber}`} class="contact-button contact-button--phone">
              <span class="contact-button__line"></span>
              <div class="contact-button__content">
                <span class="contact-button__text">{store.storeName}</span>
                <span class="contact-button__detail">{store.storePhoneNumber}</span>
              </div>
              <img src={phoneIcon.src} alt="" class="contact-button__icon" />
            </a>
          ))}
        </div>
      </div>
    </section>

    <!-- LINEセクション -->
    <section id="line-contact" class="line-contact-section">
      <div class="container">
        <h2 class="line-contact-title">LINE</h2>
        <div class="line-contact-buttons">
          {stores.map((store) => (
            <a href={store.storeLine ? `https://lin.ee/${store.storeLine}` : '#'} target="_blank" rel="noopener noreferrer" class="contact-button contact-button--line">
              <span class="contact-button__line"></span>
              <div class="contact-button__content">
                <span class="contact-button__text">{store.storeName}</span>
                <span class="contact-button__detail">LINE</span>
              </div>
              <img src={lineIcon.src} alt="" class="contact-button__icon" />
            </a>
          ))}
        </div>
      </div>
    </section>

    <!-- お問い合わせフォームセクション -->
    <section id="mail-contact" class="mail-contact-section">
      <div class="container">
        <h2 class="mail-contact-title">お問い合わせフォーム</h2>
        <div class="mail-contact-description">
          <p>メールでのお問い合わせはこちらからお願いいたします。<br>
            フォーム上部のご要件種類を選択し、ご入力ください。<br>
            営業・宣伝はお断りしております。</p>
        </div>
        
        <!-- タブ切り替え -->
        <div class="contact-form-tabs">
          <div class="contact-tabs">
            <button class="contact-tab active" data-tab="pet">
              <span class="contact-tab__label">ペット<br class="sm-down-only">について</span>
              <span class="contact-tab__arrow">▼</span>
            </button>
            <button class="contact-tab" data-tab="job">
              <span class="contact-tab__label">求人<br class="sm-down-only">について</span>
              <span class="contact-tab__arrow">▼</span>
            </button>
            <button class="contact-tab" data-tab="other">
              <span class="contact-tab__label">その他の<br class="sm-down-only">お問い合わせ</span>
              <span class="contact-tab__arrow">▼</span>
            </button>
          </div>
        </div>

        <!-- フォーム -->
        <div class="contact-forms">
          <!-- ペットについてフォーム -->
          <form class="contact-form active" id="pet-form" data-form="pet">
            <div class="form-group">
              <label for="pet-inquiry-type" class="form-label required">お問い合わせ種別</label>
              <select id="pet-inquiry-type" name="inquiry-type" class="form-select" required>
                <option value="">選択してください</option>
                <option value="気になる子について問い合わせる">気になる子について問い合わせる</option>
                <option value="来店予約をする">来店予約をする</option>
                <option value="ホームステイをしたい子がいる">ホームステイをしたい子がいる</option>
                <option value="その他">その他</option>
              </select>
            </div>
            
            <div class="form-group">
              <label for="pet-name" class="form-label required">お名前</label>
              <input type="text" id="pet-name" name="name" class="form-input" required>
            </div>
            
            <div class="form-group">
              <label for="pet-email" class="form-label required">メールアドレス</label>
              <input type="email" id="pet-email" name="email" class="form-input" required>
            </div>
            
            <div class="form-group">
              <label for="pet-phone" class="form-label required">電話番号</label>
              <input type="tel" id="pet-phone" name="phone" class="form-input" required>
            </div>
            
            <div class="form-group form-group--vertical">
              <label class="form-label">来店予約</label>
              <div class="form-checkbox-group">
                <label class="form-checkbox">
                  <input type="checkbox" id="pet-visit-reservation" name="visit-reservation" value="1">
                  <span class="checkbox-mark"></span>
                  <span class="checkbox-text">来店予約をする</span>
                </label>
                <div class="visit-reservation-details" id="visit-reservation-details" style="display: none;">
                  <div class="reservation-fields">
                    <div class="reservation-field">
                      <label for="visit-date" class="reservation-label">来店日</label>
                      <input type="date" id="visit-date" name="visit-date" class="form-input">
                    </div>
                    <div class="reservation-field">
                      <label for="visit-time" class="reservation-label">来店時間</label>
                      <select id="visit-time" name="visit-time" class="form-select">
                        <option value="">選択してください</option>
                        <option value="11:00-11:30">11:00〜11:30</option>
                        <option value="11:30-12:00">11:30〜12:00</option>
                        <option value="12:00-12:30">12:00〜12:30</option>
                        <option value="12:30-13:00">12:30〜13:00</option>
                        <option value="13:00-13:30">13:00〜13:30</option>
                        <option value="14:00-14:30">14:00〜14:30</option>
                        <option value="14:30-15:00">14:30〜15:00</option>
                        <option value="15:00-15:30">15:00〜15:30</option>
                        <option value="15:30-16:00">15:30〜16:00</option>
                        <option value="16:00-16:30">16:00〜16:30</option>
                        <option value="16:30-17:00">16:30〜17:00</option>
                        <option value="17:00-17:30">17:00〜17:30</option>
                        <option value="17:30-18:00">17:30〜18:00</option>
                        <option value="18:00-18:30">18:00〜18:30</option>
                        <option value="18:30-19:00">18:30〜19:00</option>
                        <option value="19:00-19:30">19:00〜19:30</option>
                        <option value="19:30-20:00">19:30〜20:00</option>
                      </select>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            
            <div class="form-group">
              <label class="form-label" id="inquiry-number-label">お問い合わせ番号</label>
              <div class="form-pet-select">
                <div class="visit-reservation-notice" id="visit-reservation-notice" style="display: none;">
                  <p>※来店予約では、店舗が異なるペットは選べません</p>
                </div>
                <button type="button" class="pet-select-button" id="pet-select-button">
                  問い合わせたいペットを選ぶ
                </button>
                <div class="selected-pets" id="selected-pets"></div>
              </div>
            </div>
            
            <div class="form-group">
              <label for="pet-content" class="form-label">お問い合わせ内容</label>
              <textarea id="pet-content" name="content" class="form-textarea" rows="6"></textarea>
            </div>
            
            <div class="form-privacy">
              <label class="privacy-checkbox">
                <input type="checkbox" name="privacy-agreement">
                <span class="checkmark"></span>
                <span class="privacy-text">
                  <a href="/privacy-policy" target="_blank">プライバシーポリシー</a>をご確認の上、<br class="sm-down-only">よろしければ「送信する」をクリックしてください
                </span>
              </label>
            </div>
            
            <div class="privacy-error" id="privacy-error-pet" style="display: none;">
              プライバシーポリシーへの同意が必要です。
            </div>
            
            <div class="form-submit">
              <button type="submit" class="submit-button">送信する</button>
            </div>
          </form>

          <!-- 求人についてフォーム -->
          <form class="contact-form" id="job-form" data-form="job">
            <div class="form-group">
              <label for="job-inquiry-type" class="form-label required">お問い合わせ種別</label>
              <select id="job-inquiry-type" name="inquiry-type" class="form-select" required>
                <option value="">選択してください</option>
                <option value="正社員での応募">正社員での応募</option>
                <option value="アルバイトでの応募">アルバイトでの応募</option>
                <option value="その他">その他</option>
              </select>
            </div>
            
            <div class="form-group">
              <label for="job-name" class="form-label required">お名前</label>
              <input type="text" id="job-name" name="name" class="form-input" required>
            </div>
            
            <div class="form-group">
              <label for="job-email" class="form-label required">メールアドレス</label>
              <input type="email" id="job-email" name="email" class="form-input" required>
            </div>
            
            <div class="form-group">
              <label for="job-phone" class="form-label required">電話番号</label>
              <input type="tel" id="job-phone" name="phone" class="form-input" required>
            </div>
            
            <div class="form-group">
              <label for="job-content" class="form-label">お問い合わせ内容</label>
              <textarea id="job-content" name="content" class="form-textarea" rows="6"></textarea>
            </div>
            
            <div class="form-privacy">
              <label class="privacy-checkbox">
                <input type="checkbox" name="privacy-agreement">
                <span class="checkmark"></span>
                <span class="privacy-text">
                  <a href="/privacy-policy" target="_blank">プライバシーポリシー</a>をご確認の上、<br class="sm-down-only">よろしければ「送信する」をクリックしてください
                </span>
              </label>
            </div>
            
            <div class="privacy-error" id="privacy-error-job" style="display: none;">
              プライバシーポリシーへの同意が必要です。
            </div>
            
            <div class="form-submit">
              <button type="submit" class="submit-button">送信する</button>
            </div>
          </form>

          <!-- その他のお問い合わせフォーム -->
          <form class="contact-form" id="other-form" data-form="other">
            <div class="form-group">
              <label for="other-name" class="form-label required">お名前</label>
              <input type="text" id="other-name" name="name" class="form-input" required>
            </div>
            
            <div class="form-group">
              <label for="other-email" class="form-label required">メールアドレス</label>
              <input type="email" id="other-email" name="email" class="form-input" required>
            </div>
            
            <div class="form-group">
              <label for="other-phone" class="form-label required">電話番号</label>
              <input type="tel" id="other-phone" name="phone" class="form-input" required>
            </div>
            
            <div class="form-group">
              <label for="other-content" class="form-label required">お問い合わせ内容</label>
              <textarea id="other-content" name="content" class="form-textarea" rows="6" required></textarea>
            </div>
            
            <div class="form-privacy">
              <label class="privacy-checkbox">
                <input type="checkbox" name="privacy-agreement">
                <span class="checkmark"></span>
                <span class="privacy-text">
                  <a href="/privacy-policy" target="_blank">プライバシーポリシー</a>をご確認の上、<br class="sm-down-only">よろしければ「送信する」をクリックしてください
                </span>
              </label>
            </div>
            
            <div class="privacy-error" id="privacy-error-other" style="display: none;">
              プライバシーポリシーへの同意が必要です。
            </div>
            
            <div class="form-submit">
              <button type="submit" class="submit-button">送信する</button>
            </div>
          </form>
        </div>
      </div>
    </section>

    <BannerSection />
    
    <ContactCTASection />
  </main>

  <!-- ペット選択モーダル -->
  <div id="pet-select-modal" class="pet-modal">
    <div class="pet-modal__overlay">
      <div class="pet-modal__content">
        <div class="pet-modal__header">
          <p class="pet-modal__title">問い合わせたい子犬・子猫を選択し、「問い合わせに追加」ボタンを押してください。（複数選択可）</p>
          <button class="pet-modal__close" id="pet-modal-close">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M18 6L6 18" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
              <path d="M6 6L18 18" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
          </button>
        </div>
        
        <div class="pet-modal__body">
          <div class="pet-tabs">
            <button class="pet-tab active" data-tab="dogs">子犬</button>
            <button class="pet-tab" data-tab="cats">子猫</button>
          </div>
          
          <div class="pet-grid-container">
            <!-- 子犬一覧 -->
            <div class="pet-grid active" data-grid="dogs">
              {pets.filter(pet => pet.animalType === 'dog').map((pet) => (
                <div class="pet-card" data-pet-id={pet.id}>
                  <div class="pet-card__image">
                    <img src={pet.imageUrl01 || '/images/ui/img_loading-pet-image-01.webp'} alt={pet.breedTypeJa} />
                  </div>
                  <div class="pet-card__content">
                    <div class="pet-card__checkbox">
                      <input type="checkbox" id={`pet-${pet.id}`} name="selected-pets" value={pet.id} />
                      <label for={`pet-${pet.id}`} class="pet-card__checkbox-label"></label>
                    </div>
                    <div class="pet-card__info">
                      <div class="pet-card__number">
                        <span class="pet-card__number-label">お問い合わせ番号：</span>
                        <span class="pet-card__number-value">{pet.id.replace(/^0+/, '') || pet.id}</span>
                      </div>
                      <div class="pet-card__breed">
                        {pet.breedTypeJa}
                        <span class={`pet-card__gender ${pet.gender === '男の子' ? 'male' : 'female'}`}>
                          {pet.gender === '男の子' ? '♂' : '♀'}
                        </span>
                      </div>
                      <div class="pet-card__color">カラー：{pet.color}</div>
                      <div class="pet-card__birthday">誕生日：{new Date(pet.birthday).toLocaleDateString('ja-JP')}</div>
                      <div class="pet-card__store">店舗：{pet.storeName}</div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
            
            <!-- 子猫一覧 -->
            <div class="pet-grid" data-grid="cats">
              {pets.filter(pet => pet.animalType === 'cat').map((pet) => (
                <div class="pet-card" data-pet-id={pet.id}>
                  <div class="pet-card__image">
                    <img src={pet.imageUrl01 || '/images/ui/img_loading-pet-image-01.webp'} alt={pet.breedTypeJa} />
                  </div>
                  <div class="pet-card__content">
                    <div class="pet-card__checkbox">
                      <input type="checkbox" id={`pet-${pet.id}`} name="selected-pets" value={pet.id} />
                      <label for={`pet-${pet.id}`} class="pet-card__checkbox-label"></label>
                    </div>
                    <div class="pet-card__info">
                      <div class="pet-card__number">
                        <span class="pet-card__number-label">お問い合わせ番号：</span>
                        <span class="pet-card__number-value">{pet.id.replace(/^0+/, '') || pet.id}</span>
                      </div>
                      <div class="pet-card__breed">
                        {pet.breedTypeJa}
                        <span class={`pet-card__gender ${pet.gender === '男の子' ? 'male' : 'female'}`}>
                          {pet.gender === '男の子' ? '♂' : '♀'}
                        </span>
                      </div>
                      <div class="pet-card__color">カラー：{pet.color}</div>
                      <div class="pet-card__birthday">誕生日：{new Date(pet.birthday).toLocaleDateString('ja-JP')}</div>
                      <div class="pet-card__store">店舗：{pet.storeName}</div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
        
        <div class="pet-modal__footer">
          <button class="pet-modal__add-button" id="pet-modal-add">お問い合わせに追加する</button>
        </div>
      </div>
    </div>
  </div>

  <!-- 送信完了モーダル -->
  <div class="success-modal" id="success-modal" style="display: none;">
    <div class="success-modal__overlay"></div>
    <div class="success-modal__content">
      <div class="success-modal__icon">✓</div>
      <h3 class="success-modal__title">送信完了</h3>
      <p class="success-modal__message">お問い合わせを受け付けました。<br>ありがとうございます。<br>確認次第連絡差し上げます。</p>
      <button class="success-modal__button" id="success-modal-close">閉じる</button>
    </div>
  </div>

  <!-- エラーモーダル -->
  <div class="error-modal" id="error-modal" style="display: none;">
    <div class="error-modal__overlay"></div>
    <div class="error-modal__content">
      <div class="error-modal__icon">!</div>
      <h3 class="error-modal__title">送信エラー</h3>
      <p class="error-modal__message">送信に失敗しました。<br>もう一度お試しください。</p>
      <button class="error-modal__button" id="error-modal-close">閉じる</button>
    </div>
  </div>
</Layout>

<style lang="scss">
@use '../../styles/mixins' as *;
@use '../../styles/tokens/_typography' as *;
@use '../../styles/tokens/_colors' as *;
@use '../../styles/tokens/_radius' as *;

// 問い合わせ方法選択セクション
.contact-methods-section {
  padding: rem(60) 0;
  background-color: $color-background-primary;
  
  @include breakpoint-up(sm) {
    padding: rem(80) 0;
  }
}

.contact-methods-description {
  margin-bottom: rem(40);
  
  @include breakpoint-up(sm) {
    margin-bottom: rem(60);
  }
  
  p {
    @include typography-ja-s;
    color: $color-text-primary;
    line-height: 1.8;
    margin: 0;
    max-width: rem(800);
    margin-left: auto;
    margin-right: auto;
  }
}

.contact-methods {
  display: flex;
  flex-direction: row;
  gap: rem(12);
  justify-content: center;
  margin-top: rem(10);
  
  @include breakpoint-up(sm) {
    gap: rem(30);
  }
}

.contact-method-link {
  display: block;
  text-decoration: none;
  color: inherit;
  width: 30%;
  flex-shrink: 0;
  
  &:hover {
    text-decoration: none;
  }
  
  @include breakpoint-up(sm) {
    width: 25%;
    aspect-ratio: 1/1;
  }
  
  @include breakpoint-up(md) {
    width: rem(160);
  }
  
  @include breakpoint-up(lg) {
    width: rem(180);
  }
  
  &:hover {
    .contact-method-link__inner {
      transform: translateY(rem(-4));
      box-shadow: 0 8px 30px rgba(0, 0, 0, 0.15);
    }
  }
  
  &--line {
    .contact-method-link__inner {
      border-color: #00B900;
    }
  }
}

.contact-method-link__inner {
  background-color: $color-background-primary;
  border: 1px solid $color-border-primary;
  border-radius: $radius-m;
  padding: rem(20) rem(5) rem(5);
  text-align: center;
  transition: all 0.3s ease;
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  gap: 0;
  
  @include breakpoint-up(sm) {
  }
  
  @include breakpoint-up(xl) {
  }
}

.contact-method-link__icon {
  width: rem(40);
  height: rem(40);
  display: flex;
  align-items: center;
  justify-content: center;
  margin-bottom: rem(10);
  
  img {
    width: 100%;
    height: 100%;
    object-fit: contain;
  }
  
  @include breakpoint-up(sm) {
    width: rem(50);
    height: rem(50);
  }
}

.contact-method-link__text {
  font-size: rem(12);
  font-weight: $font-weight-semibold;
  color: $color-text-primary;
  line-height: 1.6;
  @include breakpoint-up(xl) {
    @include typography-ja-s($font-weight-semibold);
  }
}

.contact-method-link__arrow {
  color: $color-text-secondary;
  margin-top: rem(10);
  
  svg {
    width: rem(24);
    height: rem(24);
  }
}

// お電話セクション
.phone-contact-section {
  background-color: $color-background-tertiary;
  padding: rem(60) 0;
  
  @include breakpoint-up(sm) {
    padding: rem(80) 0;
  }
  
  @include breakpoint-up(lg) {
    padding: rem(100) 0;
  }
}

.phone-contact-title {
  @include typography-ja-l($font-weight-semibold);
  color: $color-text-primary;
  text-align: center;
  margin: 0 0 rem(40) 0;
  
  @include breakpoint-up(sm) {
    margin-bottom: rem(50);
  }
  
  @include breakpoint-up(lg) {
    margin-bottom: rem(60);
  }
}

.phone-contact-buttons {
  display: flex;
  flex-direction: column;
  gap: rem(16);
  align-items: center;
  width: 100%;
  
  @include breakpoint-up(sm) {
    flex-direction: row;
    flex-wrap: wrap;
    gap: rem(20);
    justify-content: center;
    align-items: flex-start;
  }
  
  @include breakpoint-up(lg) {
    gap: rem(45);
    justify-content: center;
  }
}

.contact-button {
  display: inline-flex;
  align-items: center;
  border: 1px solid $color-text-primary;
  border-radius: $radius-s;
  padding: rem(30) rem(75) rem(30) rem(55);
  text-decoration: none;
  color: $color-text-primary;
  cursor: pointer;
  position: relative;
  transition: all 0.3s ease;
  width: rem(270);
  flex-shrink: 0;
  
  @include breakpoint-up(lg) {
    width: rem(300);
  }
  background-color: $color-background-primary;
  
  &:hover {
    text-decoration: none;
    
    .contact-button__line {
      transform: translateX(rem(15));
    }
  }
  
  &--phone {
    border-color: $color-brand-primary;
    
    .contact-button__line {
      background-color: $color-brand-primary;
    }
  }
}

.contact-button__line {
  position: absolute;
  left: rem(-30);
  width: rem(40);
  height: 1px;
  transition: transform 0.3s ease;
  flex-shrink: 0;
}

.contact-button__content {
  display: flex;
  align-items: center;
  gap: rem(10);
  width: 100%;
  justify-content: center;
}

.contact-button__text,
.contact-button__detail {
  @include typography-ja-s($font-weight-semibold);
  color: $color-text-primary;
  white-space: nowrap;
}

.contact-button__icon {
  position: absolute;
  right: rem(30);
  top: 50%;
  transform: translateY(-50%);
  display: inline-flex;
  align-items: center;
  justify-content: center;
  width: rem(20);
  height: rem(20);
  
  img, svg {
    width: 100%;
    height: 100%;
    fill: $color-text-primary;
  }
}

// LINEセクション
.line-contact-section {
  background-color: $color-background-primary;
  padding: rem(60) 0;
  
  @include breakpoint-up(sm) {
    padding: rem(80) 0;
  }
  
  @include breakpoint-up(lg) {
    padding: rem(100) 0;
  }
}

.line-contact-title {
  @include typography-ja-l($font-weight-semibold);
  color: $color-text-primary;
  text-align: center;
  margin: 0 0 rem(40) 0;
  
  @include breakpoint-up(sm) {
    margin-bottom: rem(50);
  }
  
  @include breakpoint-up(lg) {
    font-size: $font-size-ja-2l;
    margin-bottom: rem(60);
  }
}

.line-contact-buttons {
  display: flex;
  flex-direction: column;
  gap: rem(16);
  align-items: center;
  width: 100%;
  
  @include breakpoint-up(sm) {
    flex-direction: row;
    flex-wrap: wrap;
    gap: rem(20);
    justify-content: center;
    align-items: flex-start;
  }
  
  @include breakpoint-up(lg) {
    gap: rem(45);
    justify-content: center;
  }
}

.contact-button--line {
  border-color: #00B900;
  
  .contact-button__line {
    background-color: #00B900;
  }
}

// お問い合わせフォームセクション
.mail-contact-section {
  background-color: $color-background-secondary;
  padding: rem(60) 0;
  
  @include breakpoint-up(sm) {
    padding: rem(80) 0;
  }
  
  @include breakpoint-up(lg) {
    padding: rem(100) 0;
  }
}

.mail-contact-title {
  @include typography-ja-l($font-weight-semibold);
  color: $color-text-primary;
  text-align: center;
  margin: 0 0 rem(40) 0;
  
  @include breakpoint-up(sm) {
    margin-bottom: rem(50);
  }
  
  @include breakpoint-up(lg) {
    font-size: $font-size-ja-2l;
    margin-bottom: rem(60);
  }
}

.mail-contact-description {
  text-align: center;
  margin-bottom: rem(40);
  
  @include breakpoint-up(sm) {
    margin-bottom: rem(60);
  }
  
  p {
    @include typography-ja-s;
    color: $color-text-primary;
    line-height: 1.8;
    margin: 0;
    max-width: rem(800);
    margin-left: auto;
    margin-right: auto;
    
    @include breakpoint-up(lg) {
    }
  }
}


// コンタクトフォーム専用タブスタイリング (独立)
.contact-tabs {
  display: flex;
  justify-content: center;
  margin-bottom: rem(40);
  border: 1px solid $color-text-primary;
  background-color: $color-background-primary;
  border-radius: $radius-s;
  overflow: hidden;
  max-width: fit-content;
  margin-left: auto;
  margin-right: auto;
  padding: rem(5);
  
  @include breakpoint-up(sm) {
    margin-bottom: rem(60);
  }
}

.contact-tab {
  padding: rem(12);
  border: none;
  border-radius: 0;
  @include typography-ja-s($font-weight-semibold);
  cursor: pointer;
  color: $color-text-secondary;
  background-color: $color-background-primary;
  transition: all 0.3s ease;
  position: relative;
  min-width: rem(100);
  text-align: center;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  gap: rem(4);
  box-sizing: border-box;
  border: 1px solid transparent;
  @include breakpoint-up(sm) {
    padding: rem(12) rem(20);
  }
  
  &:hover {
    opacity: 0.7;
  }
  
  &.active {
    color: $color-text-primary;
    background-color: $color-background-tertiary;
    border: 1px solid $color-text-primary;
    border-radius: rem(3);
  }
}

.contact-tab__arrow {
  font-size: rem(10);
  transition: opacity 0.3s ease;
}

// フォームスタイリング
.contact-forms {
  max-width: rem(800);
  margin: 0 auto;
}

.contact-form {
  display: none;
  
  &.active {
    display: block;
  }
}

.form-group {
  margin-bottom: rem(24);
  
  @include breakpoint-up(sm) {
    margin-bottom: rem(30);
  }
  
  @include breakpoint-up(md) {
    display: flex;
    align-items: flex-start;
    gap: rem(20);
  }
  
  // 来店予約フォームグループは特別なレイアウト
  &.form-group--vertical {
    @include breakpoint-up(md) {
      display: flex;
      align-items: flex-start;
      gap: rem(20);
    }
  }
}

.form-label {
  display: block;
  @include typography-ja-s($font-weight-semibold);
  color: $color-text-primary;
  margin-bottom: rem(8);
  
  @include breakpoint-up(md) {
    flex-shrink: 0;
    width: rem(180);
    margin-bottom: 0;
    padding-top: rem(10);
  }
  
  &.required::after {
    content: '必須';
    @include typography-ja-2s($font-weight-semibold);
    color: $color-feedback-error;
    border: 1px solid $color-feedback-error;
    padding: rem(2) rem(4);
    margin-left: rem(8);
    border-radius: rem(4);
  }
}

.form-input,
.form-select {
  width: 100%;
  padding: rem(8) rem(16) rem(8) rem(10);
  border: 1px solid $color-border-secondary;
  border-radius: $radius-s;
  @include typography-ja-s;
  color: $color-text-primary;
  background-color: $color-background-primary;
  transition: border-color 0.3s ease;
  
  @include breakpoint-up(xl) {
    padding: rem(8) rem(20) rem(8) rem(10);
  }
  
  @include breakpoint-up(md) {
    flex: 1;
  }
  
  &:focus {
    outline: none;
    border-color: $color-brand-primary;
  }
  
  &::placeholder {
    color: $color-text-tertiary;
  }
}

// セレクトフォームの下三角ボタンをカスタマイズ
.form-select {
  appearance: none;
  background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' viewBox='0 0 12 12'%3E%3Cpath d='M6 9L1.5 4.5L2.5 3.5L6 7L9.5 3.5L10.5 4.5L6 9Z' fill='%23666666'/%3E%3C/svg%3E");
  background-repeat: no-repeat;
  background-position: right rem(12) center;
  background-size: rem(12) rem(12);
  padding-right: rem(40);
  
  @include breakpoint-up(sm) {
    background-position: right rem(16) center;
    padding-right: rem(44);
  }
  
  &:focus {
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' viewBox='0 0 12 12'%3E%3Cpath d='M6 9L1.5 4.5L2.5 3.5L6 7L9.5 3.5L10.5 4.5L6 9Z' fill='%23007bff'/%3E%3C/svg%3E");
  }
}

// 日付入力フィールドのカレンダーアイコンをカスタマイズ
input[type="date"] {
  position: relative;
  
  &::-webkit-calendar-picker-indicator {
    position: absolute;
    right: rem(10);
    top: 50%;
    transform: translateY(-50%);
    width: rem(12);
    height: rem(12);
    cursor: pointer;
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' viewBox='0 0 12 12' fill='none'%3E%3Cpath d='M1.5 3.5h9v6.5a1 1 0 01-1 1h-7a1 1 0 01-1-1V3.5z' stroke='%23666666' stroke-width='1' fill='none'/%3E%3Cpath d='M3.5 1.5v3M8.5 1.5v3M1.5 5.5h9' stroke='%23666666' stroke-width='1'/%3E%3C/svg%3E");
    background-size: rem(12) rem(12);
    background-repeat: no-repeat;
    background-position: center;
    opacity: 1;
    
    @include breakpoint-up(sm) {
      right: rem(14);
    }
  }
  
  &:focus::-webkit-calendar-picker-indicator {
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' viewBox='0 0 12 12' fill='none'%3E%3Cpath d='M1.5 3.5h9v6.5a1 1 0 01-1 1h-7a1 1 0 01-1-1V3.5z' stroke='%23007bff' stroke-width='1' fill='none'/%3E%3Cpath d='M3.5 1.5v3M8.5 1.5v3M1.5 5.5h9' stroke='%23007bff' stroke-width='1'/%3E%3C/svg%3E");
  }
}

.form-textarea {
  width: 100%;
  padding: rem(8) rem(16);
  border: 1px solid $color-border-secondary;
  border-radius: $radius-s;
  @include typography-ja-s;
  color: $color-text-primary;
  background-color: $color-background-primary;
  resize: vertical;
  min-height: rem(120);
  transition: border-color 0.3s ease;
  
  @include breakpoint-up(sm) {
    padding: rem(8) rem(20);
  }
  
  @include breakpoint-up(md) {
    flex: 1;
  }
  
  &:focus {
    outline: none;
    border-color: $color-brand-primary;
  }
  
  &::placeholder {
    color: $color-text-tertiary;
  }
}

.form-privacy {
  margin-bottom: rem(30);
  
  @include breakpoint-up(sm) {
    margin-bottom: rem(40);
  }
}

.privacy-error {
  color: #dc3545;
  font-size: rem(14);
  text-align: center;
  margin-bottom: rem(16);
  font-weight: $font-weight-semibold;
}

.privacy-checkbox {
  display: flex;
  align-items: flex-start;
  gap: rem(12);
  cursor: default;
  @include typography-ja-s;
  color: $color-text-primary;
  line-height: 1.6;
  
  input[type="checkbox"] {
    display: none;
  }
  
  .checkmark {
    cursor: pointer;
  }
  
  .privacy-text {
    cursor: default;
  }
  
  .checkmark {
    width: rem(20);
    height: rem(20);
    border: 2px solid $color-border-secondary;
    border-radius: rem(4);
    background-color: $color-background-primary;
    flex-shrink: 0;
    position: relative;
    transition: all 0.3s ease;
    margin-top: rem(2);
    
    &::after {
      content: '';
      position: absolute;
      top: rem(2);
      left: rem(6);
      width: rem(6);
      height: rem(10);
      border: 2px solid $color-background-primary;
      border-top: none;
      border-left: none;
      transform: rotate(45deg);
      opacity: 0;
      transition: opacity 0.3s ease;
    }
  }
  
  input[type="checkbox"]:checked + .checkmark {
    background-color: $color-brand-primary;
    border-color: $color-brand-primary;
    
    &::after {
      opacity: 1;
    }
  }
  
  .privacy-text {
    a {
      color: $color-brand-primary;
      text-decoration: underline;
      white-space: nowrap;
      
      &:hover {
        color: $color-text-primary;
      }
    }
  }
}

.form-submit {
  text-align: center;
}

.submit-button {
  background-color: $color-brand-primary;
  color: $color-background-primary;
  border: none;
  border-radius: $radius-s;
  padding: rem(16) rem(40);
  @include typography-ja-s($font-weight-semibold);
  cursor: pointer;
  transition: all 0.3s ease;
  min-width: rem(200);
  
  @include breakpoint-up(sm) {
    padding: rem(20) rem(50);
    min-width: rem(250);
  }
  
  &:hover {
    background-color: darken($color-brand-primary, 10%);
    transform: translateY(rem(-2));
  }
  
  &:disabled {
    background-color: $color-text-tertiary;
    cursor: not-allowed;
    transform: none;
  }
}

// チェックボックスグループ
.form-checkbox-group {
  @include breakpoint-up(md) {
    padding-top: rem(10);
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: rem(16);
  }
}

.form-checkbox {
  display: flex;
  align-items: center;
  gap: rem(12);
  cursor: pointer;
  @include typography-ja-s;
  color: $color-text-primary;
  width: fit-content;
  
  input[type="checkbox"] {
    display: none;
  }
  
  .checkbox-mark {
    width: rem(20);
    height: rem(20);
    border: 2px solid $color-border-secondary;
    border-radius: rem(4);
    background-color: $color-background-primary;
    flex-shrink: 0;
    position: relative;
    transition: all 0.3s ease;
    
    &::after {
      content: '';
      position: absolute;
      top: rem(2);
      left: rem(6);
      width: rem(6);
      height: rem(10);
      border: 2px solid $color-background-primary;
      border-top: none;
      border-left: none;
      transform: rotate(45deg);
      opacity: 0;
      transition: opacity 0.3s ease;
    }
  }
  
  input[type="checkbox"]:checked + .checkbox-mark {
    background-color: $color-brand-primary;
    border-color: $color-brand-primary;
    
    &::after {
      opacity: 1;
    }
  }
  
  .checkbox-text {
    user-select: none;
  }
}

// 来店予約時の注意文
.visit-reservation-notice {
  margin-bottom: rem(12);
  padding: rem(11) 0;
  
  p {
    @include typography-ja-s($font-weight-semibold);
    margin: 0;
    line-height: 1.4;
  }
}

// 来店予約詳細
.visit-reservation-details {
  margin-top: rem(16);
  padding: rem(16);
  background-color: $color-background-secondary;
  border-radius: $radius-s;
  border: 1px solid $color-border-secondary;
  
  @include breakpoint-up(sm) {
    margin-top: rem(20);
    padding: rem(20);
  }
  
  @include breakpoint-up(md) {
    margin-top: rem(16);
    margin-left: 0;
    width: 100%;
  }
}

.reservation-fields {
  display: flex;
  flex-direction: column;
  gap: rem(16);
}

.reservation-field {
  display: flex;
  flex-direction: column;
  gap: rem(8);
}

.reservation-label {
  @include typography-ja-s($font-weight-semibold);
  color: $color-text-primary;
}

// ペット選択フォーム
.form-pet-select {
  @include breakpoint-up(md) {
    flex: 1;
  }
}

.pet-select-button {
  background-color: $color-background-accent;
  color: $color-background-primary;
  border: none;
  border-radius: $radius-s;
  padding: rem(6) rem(20);
  @include typography-ja-s($font-weight-semibold);
  cursor: pointer;
  transition: all 0.3s ease;
  text-align: center;
  position: relative;
  
  @include breakpoint-up(xl) {
    padding: rem(10) rem(24);
  }
  
  &:hover {
    background-color: darken($color-brand-primary, 10%);
    transform: translateY(rem(-2));
  }
  
  &:active {
    transform: translateY(0);
  }
}

.selected-pets {
  margin-top: rem(12);
  
  .selected-pet {
    background-color: #F3F4F6;
    border: 1px solid #D1D5DB;
    border-radius: 4px;
    padding: 8px 12px;
    margin-bottom: 8px;
    font-size: 14px;
    color: #111827;
    display: flex;
    align-items: center;
    gap: 8px;
    width: 100%;
    box-sizing: border-box;
    
    &:last-child {
      margin-bottom: 0;
    }
  }
}

.selected-pet__remove {
  background-color: $color-text-link-hover;
  color: #FFFFFF;
  border: none;
  border-radius: 50%;
  width: 20px;
  height: 20px;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  font-size: 12px;
  font-weight: bold;
  line-height: 1;
  transition: all 0.3s ease;
  flex-shrink: 0;
  min-width: 20px;
  min-height: 20px;
  
  &:hover {
    background-color: $color-text-link;
    transform: scale(1.1);
  }
  
  &:active {
    transform: scale(0.95);
  }
}

.selected-pet__text {
  flex: 1;
  font-size: 14px;
  color: #111827;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  line-height: 1.4;
}

// ペット選択モーダル
.pet-modal {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 1000;
  display: none;
  
  &.active {
    display: block;
  }
}

.pet-modal__overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  padding: rem(20);
  padding-top: rem(70);
  
  @include breakpoint-up(sm) {
    padding-top: rem(110);
  }
}

.pet-modal__content {
  background-color: $color-background-primary;
  border-radius: $radius-m;
  max-width: rem(1200);
  max-height: 70vh;
  width: 100%;
  overflow: hidden;
  display: flex;
  flex-direction: column;
}

.pet-modal__header {
  padding: rem(50) rem(15) rem(16);
  border-bottom: 1px solid $color-border-secondary;
  position: relative;
  text-align: center;
  background-color: $color-background-secondary;
  
  @include breakpoint-up(sm) {
    padding: rem(60) rem(20) rem(30);
  }
}

.pet-modal__title {
  @include typography-ja-s;
  text-align: left;
  color: $color-text-primary;
  margin: 0;
  line-height: 1.6;
  @include breakpoint-up(lg) {
    text-align: center;
  }
}

.pet-modal__close {
  background: none;
  border: none;
  color: $color-text-white;
  cursor: pointer;
  padding: rem(6);
  transition: all 0.3s ease;
  position: absolute;
  top: rem(10);
  right: rem(10);
  background-color: $color-text-link;
  width: rem(30);
  height: rem(30);
  border-radius: 50%;

  
  @include breakpoint-up(sm) {
    // top: rem(24);
    // right: rem(30);
  }
  
  &:hover {
    color: $color-text-primary;
    background-color: $color-background-secondary;
  }
  
  svg {
    width: rem(18);
    height: rem(18);
  }
}

.pet-modal__body {
  padding: rem(20);
  flex: 1;
  overflow-y: auto;
  
  @include breakpoint-up(xl) {
    padding: rem(30) rem(40);
  }
}

.pet-tabs {
  display: flex;
  justify-content: center;
  margin-bottom: rem(40);
  border: 1px solid $color-text-primary;
  background-color: $color-background-primary;
  border-radius: $radius-s;
  overflow: hidden;
  max-width: fit-content;
  margin-left: auto;
  margin-right: auto;
  padding: rem(5);
  
  @include breakpoint-up(sm) {
    // margin-bottom: rem(60);
  }
}

.pet-tab {
  padding: rem(12);
  border: none;
  border-radius: 0;
  @include typography-ja-s($font-weight-semibold);
  cursor: pointer;
  color: $color-text-secondary;
  background-color: $color-background-primary;
  transition: all 0.3s ease;
  position: relative;
  min-width: rem(100);
  text-align: center;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  gap: rem(4);
  box-sizing: border-box;
  border: 1px solid transparent;
  
  @include breakpoint-up(sm) {
    padding: rem(12) rem(20);
  }
  
  &:hover {
    opacity: 0.7;
  }
  
  &.active {
    color: $color-text-primary;
    background-color: $color-background-tertiary;
    border: 1px solid $color-text-primary;
    border-radius: rem(3);
  }
}

.pet-grid-container {
  position: relative;
}

.pet-grid {
  display: none;
  grid-template-columns: 1fr;
  gap: rem(20);
  
  @include breakpoint-up(sm) {
    grid-template-columns: repeat(2, 1fr);
    gap: rem(16);
  }
  
  &.active {
    display: grid;
  }
}

.pet-card {
  border-radius: $radius-l;
  overflow: hidden;
  background-color: $color-background-tertiary;
  transition: all 0.3s ease;
  cursor: pointer;
  display: flex;
  padding: rem(10) rem(15) rem(20);
  gap: rem(15);
  align-items: flex-start;
  @include breakpoint-up(lg) {
    gap: rem(25);
    padding: rem(15) rem(20) rem(30);
  }
  
  &:hover {
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    transform: translateY(rem(-2));
  }
}

.pet-card__image {
  width: rem(120);
  height: rem(120);
  flex-shrink: 0;
  overflow: hidden;
  position: relative;
  margin-top: rem(15);
  
  @include breakpoint-up(sm) {
    width: rem(140);
    height: rem(140);
  }
  
  @include breakpoint-up(lg) {
    width: rem(200);
    height: rem(200);
  }
  
  img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
    border-radius: $radius-m;
  }
}

.pet-card__content {
  padding-top: rem(30);
  position: relative;
  flex: 1;
  
  @include breakpoint-up(sm) {

  }
}

.pet-card__checkbox {
  position: absolute;
  top: 0;
  right: 0;
  
  
  input[type="checkbox"] {
    display: none;
  }
  
  .pet-card__checkbox-label {
    display: block;
    width: rem(24);
    height: rem(24);
    border: 2px solid $color-border-secondary;
    border-radius: rem(4);
    background-color: $color-background-primary;
    cursor: pointer;
    position: relative;
    transition: all 0.3s ease;
    
    &::after {
      content: '';
      position: absolute;
      top: rem(3);
      left: rem(8);
      width: rem(6);
      height: rem(12);
      border: 2px solid $color-background-primary;
      border-top: none;
      border-left: none;
      transform: rotate(45deg);
      opacity: 0;
      transition: opacity 0.3s ease;
    }
  }
  
  input[type="checkbox"]:checked + .pet-card__checkbox-label {
    background-color: $color-brand-primary;
    border-color: $color-brand-primary;
    
    &::after {
      opacity: 1;
    }
  }
}

.pet-card__info {
  display: flex;
  flex-direction: column;
  justify-content: center;
  height: 100%;
}

.pet-card__number {
  margin-bottom: rem(8);
}

.pet-card__number-label {
  @include typography-ja-2s;
  color: $color-text-primary;
  
  @include breakpoint-up(xl) {
    @include typography-ja-s;
  }
}

.pet-card__number-value {
  @include typography-ja-s($font-weight-semibold);
  color: $color-text-primary;
  
  @include breakpoint-up(xl) {
    @include typography-ja-m($font-weight-semibold);
  }
}

.pet-card__breed {
  @include typography-ja-s($font-weight-semibold);
  color: $color-text-primary;
  margin-bottom: rem(6);
  line-height: 1.4;
  
  @include breakpoint-up(xl) {
    @include typography-ja-m($font-weight-semibold);
  }
}

.pet-card__gender {
  @include typography-ja-s($font-weight-semibold);
  margin-left: rem(4);
  
  @include breakpoint-up(xl) {
    @include typography-ja-m($font-weight-semibold);
  }
  
  &.male {
    color: #7398D5;
  }
  
  &.female {
    color: #D55665;
  }
}

.pet-card__color,
.pet-card__birthday,
.pet-card__store {
  @include typography-ja-2s;
  color: $color-text-primary;
  margin-bottom: rem(4);
  
  &:last-child {
    margin-bottom: 0;
  }
  @include breakpoint-up(xl) {
    @include typography-ja-s;
  }
}

.pet-modal__footer {
  padding: rem(20) rem(30) rem(30);
  border-top: 1px solid $color-border-secondary;
  text-align: center;
  background-color: $color-background-secondary;
  
  @include breakpoint-up(sm) {
    padding: rem(30) rem(40) rem(40);
  }
}

.pet-modal__add-button {
  background-color: $color-background-accent;
  color: $color-background-primary;
  border: none;
  border-radius: $radius-s;
  padding: rem(16) rem(40);
  @include typography-ja-s($font-weight-semibold);
  cursor: pointer;
  transition: all 0.3s ease;
  min-width: rem(200);
  
  @include breakpoint-up(xl) {
    padding: rem(20);
    min-width: rem(250);
  }
  
  &:hover {
    background-color: darken($color-brand-primary, 10%);
    transform: translateY(rem(-2));
  }
  
  &:disabled {
    background-color: $color-text-tertiary;
    cursor: not-allowed;
    transform: none;
  }
}

// 来店予約時の店舗制限でグレーアウトされたペットカード
.pet-card--disabled {
  .pet-card__checkbox input[type="checkbox"]:disabled + .pet-card__checkbox-label {
    background-color: $color-text-tertiary !important;
    border-color: $color-text-tertiary !important;
    cursor: not-allowed;
  }
  
  .pet-card__info {
    color: $color-text-tertiary;
  }
}

// 送信完了・エラーモーダル
.success-modal,
.error-modal {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 9999;
  
  &__overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.6);
  }
  
  &__content {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background-color: white;
    border-radius: $radius-m;
    padding: rem(32);
    text-align: center;
    min-width: rem(320);
    max-width: rem(400);
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
  }
  
  &__icon {
    width: rem(60);
    height: rem(60);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0 auto rem(16);
    font-size: rem(28);
    font-weight: bold;
    color: white;
  }
  
  &__title {
    @include typography-ja-m($font-weight-semibold);
    color: $color-text-primary;
    margin-bottom: rem(12);
  }
  
  &__message {
    @include typography-ja-s;
    color: $color-text-secondary;
    line-height: 1.6;
    margin-bottom: rem(24);
  }
  
  &__button {
    @include button-base;
    @include typography-ja-s($font-weight-semibold);
    background-color: $color-brand-primary;
    color: white;
    padding: rem(12) rem(24);
    border-radius: $radius-s;
    min-width: rem(120);
    
    &:hover {
      background-color: darken($color-brand-primary, 10%);
    }
  }
}

.success-modal {
  .success-modal__icon {
    background-color: #10b981;
  }
}

.error-modal {
  .error-modal__icon {
    background-color: #ef4444;
  }
}

</style>

<!-- 外部スクリプトファイルを読み込み -->
<script is:inline src="/contact-form.js"></script>

<script>
  // @ts-nocheck
  // 最も基本的なテスト
  console.log('BASIC TEST: Script tag is executing');
  
  document.addEventListener('DOMContentLoaded', function() {
    console.log('=== CONTACT FORM SCRIPT LOADED ===');
    console.log('Current hostname:', window.location.hostname);
    console.log('Current URL:', window.location.href);
    
    // URLパラメータからペット選択状態を復元
    const urlParams = new URLSearchParams(window.location.search);
    const petId = urlParams.get('pet');
    
    console.log('URL params:', window.location.search);
    console.log('Pet ID from URL:', petId);
    
    if (petId) {
      console.log('Processing pet ID:', petId);
      
      // ペットフォームタブをアクティブにする
      const petTab = document.querySelector('.contact-tab[data-tab="pet"]');
      const petForm = document.querySelector('[data-form="pet"]');
      
      if (petTab && petForm) {
        console.log('Activating pet tab and form');
        // 全タブを非アクティブにして、ペットタブをアクティブに
        document.querySelectorAll('.contact-tab').forEach(t => t.classList.remove('active'));
        document.querySelectorAll('.contact-form').forEach(f => f.classList.remove('active'));
        
        petTab.classList.add('active');
        petForm.classList.add('active');
      }
      
      // お問い合わせ番号ラベルにスクロール
      setTimeout(() => {
        const inquiryLabel = document.getElementById('inquiry-number-label');
        if (inquiryLabel) {
          console.log('Scrolling to inquiry number label');
          // レスポンシブに対応したオフセット調整
          const screenWidth = window.innerWidth;
          let yOffset;
          if (screenWidth < 768) {
            yOffset = -80; // sm未満（モバイル）
          } else if (screenWidth >= 1600) {
            yOffset = -160; // 大画面
          } else {
            yOffset = -140; // sm以降〜1600px未満
          }
          const y = inquiryLabel.getBoundingClientRect().top + window.pageYOffset + yOffset;
          window.scrollTo({ top: y, behavior: 'smooth' });
        }
      }, 100);
      
      // 指定されたペットを自動選択して表示
      setTimeout(() => {
        console.log('Looking for pet checkbox:', petId);
        const targetCheckbox = document.querySelector(`input[name="selected-pets"][value="${petId}"]`);
        console.log('Found checkbox:', targetCheckbox);
        
        if (targetCheckbox) {
          console.log('Checking pet checkbox and triggering change');
          targetCheckbox.checked = true;
          
          // チェックボックスの変更イベントを発火
          const changeEvent = new Event('change', { bubbles: true });
          targetCheckbox.dispatchEvent(changeEvent);
          
          // 少し待ってから選択されたペット情報を表示に追加
          setTimeout(() => {
            console.log('Auto-clicking add button');
            const addButton = document.getElementById('pet-modal-add');
            if (addButton) {
              addButton.click();
            } else {
              // モーダルが開かれていない場合、直接選択状態を更新
              console.log('Add button not found, updating display directly');
              updateSelectedPetsDisplayForDirectPetId(petId);
            }
          }, 200);
        } else {
          console.log('Checkbox not found for pet ID:', petId);
        }
      }, 500);
    }
    
    // 直接ペットIDから選択表示を更新する関数
    function updateSelectedPetsDisplayForDirectPetId(petId) {
      const petCard = document.querySelector(`[data-pet-id="${petId}"]`);
      if (petCard) {
        console.log('Found pet card, extracting info');
        const petNumberRaw = petCard.querySelector('.pet-card__number-value')?.textContent || petId;
        const petNumber = petNumberRaw.replace(/^0+/, '') || petNumberRaw;
        const petBreed = petCard.querySelector('.pet-card__breed')?.textContent?.trim() || '';
        const petStore = petCard.querySelector('.pet-card__store')?.textContent?.replace('店舗：', '') || '';
        
        // selectedPets配列に追加
        selectedPets.push({
          id: petId,
          number: petNumber,
          breed: petBreed,
          store: petStore
        });
        
        // 表示を更新
        updateSelectedPetsDisplay();
        console.log('Updated selected pets display directly');
      }
    }
    
    // タブ切り替え機能
    const tabs = document.querySelectorAll('.contact-tab');
    const forms = document.querySelectorAll('.contact-form');
    
    tabs.forEach(tab => {
      tab.addEventListener('click', function() {
        const targetTab = this.getAttribute('data-tab');
        
        // すべてのタブからactiveクラスを削除
        tabs.forEach(t => t.classList.remove('active'));
        // すべてのフォームからactiveクラスを削除
        forms.forEach(f => f.classList.remove('active'));
        
        // クリックされたタブにactiveクラスを追加
        this.classList.add('active');
        // 対応するフォームにactiveクラスを追加
        const targetForm = document.querySelector(`[data-form="${targetTab}"]`);
        if (targetForm) {
          targetForm.classList.add('active');
        }
      });
    });
    
    // フォーム送信処理（GAS経由）
    const GAS_URL = 'https://script.google.com/macros/s/AKfycbzVngWNDeUkMTy8M98Qx2u7K0O9TJI8buYRGTxEf5SeCHd0D4duOA2ejx3EWUxaATeP9w/exec';
    
    forms.forEach(form => {
      form.addEventListener('submit', function(e) {
        console.log('=== FORM SUBMIT EVENT TRIGGERED ===');
        e.preventDefault();
        
        const formData = new FormData(this);
        const formType = this.getAttribute('data-form');
        console.log('Form type:', formType);
        
        // プライバシーポリシーの同意チェック
        const privacyAgreement = formData.get('privacy-agreement');
        
        if (!privacyAgreement) {
          // 警告メッセージを表示
          const errorElement = document.getElementById(`privacy-error-${formType}`);
          if (errorElement) {
            errorElement.style.display = 'block';
            errorElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
          }
          return;
        } else {
          // チェックされている場合は警告メッセージを隠す
          const errorElement = document.getElementById(`privacy-error-${formType}`);
          if (errorElement) {
            errorElement.style.display = 'none';
          }
        }
        
        // 送信ボタンを無効化
        const submitButton = this.querySelector('.submit-button');
        const originalText = submitButton.textContent;
        submitButton.disabled = true;
        submitButton.textContent = '送信中...';
        
        // フォームデータを整理
        const data = prepareFormData(formType, formData);
        
        // 環境判定（localhost以外はPreview/本番環境として扱う）
        const isProduction = !window.location.hostname.includes('localhost') && window.location.hostname !== '127.0.0.1';
        console.log('Environment check - isProduction:', isProduction, 'hostname:', window.location.hostname);
        console.log('フォーム送信データ:', data);
        
        if (isProduction) {
          // Preview/本番環境：iframe経由でのGAS送信（CORS回避）
          submitViaIframe(data)
          .then(() => {
            showSuccessModal();
            form.reset();
            resetFormState();
          })
          .catch(error => {
            console.error('Error:', error);
            showErrorModal();
          })
          .finally(() => {
            submitButton.disabled = false;
            submitButton.textContent = originalText;
          });
        } else {
          // ローカル開発環境：テスト用処理
          showSuccessModal();
          form.reset();
          resetFormState();
          submitButton.disabled = false;
          submitButton.textContent = originalText;
        }
      });
    });
    
    
    // iframe経由でのGAS送信（CORS回避）
    async function submitViaIframe(data) {
      return new Promise((resolve, reject) => {
        try {
          console.log('Sending to GAS via iframe:', data);
          
          // 隠しiframeを作成
          const iframe = document.createElement('iframe');
          iframe.style.display = 'none';
          iframe.name = 'gas-submit-frame';
          document.body.appendChild(iframe);
          
          // 隠しformを作成
          const form = document.createElement('form');
          form.method = 'POST';
          form.action = GAS_URL;
          form.target = 'gas-submit-frame';
          form.style.display = 'none';
          
          // データをフォームフィールドとして追加
          Object.keys(data).forEach(key => {
            const input = document.createElement('input');
            input.type = 'hidden';
            input.name = key;
            input.value = data[key];
            form.appendChild(input);
            console.log(`Form field added: ${key} = ${data[key]}`);
          });
          
          console.log('Form action URL:', form.action);
          console.log('Form method:', form.method);
          console.log('Form target:', form.target);
          
          document.body.appendChild(form);
          
          // iframe読み込み完了を待機
          iframe.onload = () => {
            // iframeの内容を確認（デバッグ用）
            try {
              const iframeDoc = iframe.contentDocument || iframe.contentWindow.document;
              const responseText = iframeDoc.body ? iframeDoc.body.innerText : 'No response';
              console.log('GAS iframe response:', responseText);
            } catch (e) {
              console.log('Could not read iframe response (CORS):', e.message);
            }
            
            setTimeout(() => {
              // クリーンアップ
              document.body.removeChild(iframe);
              document.body.removeChild(form);
              resolve();
            }, 2000); // 2秒に延長してレスポンス確認時間を増やす
          };
          
          iframe.onerror = () => {
            // クリーンアップ
            document.body.removeChild(iframe);
            document.body.removeChild(form);
            reject(new Error('iframe送信エラー'));
          };
          
          // フォーム送信
          form.submit();
          
        } catch (error) {
          console.error('submitViaIframe error:', error);
          reject(error);
        }
      });
    }
    
    // スプレッドシートに保存（予備用）
    async function saveToSpreadsheet(data) {
      try {
        console.log('Sending to GAS:', data);
        const response = await fetch(GAS_URL, {
          method: 'POST',
          mode: 'cors',
          headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
          },
          body: new URLSearchParams(data).toString()
        });
        
        console.log('GAS response status:', response.status, response.statusText);
        const result = await response.text();
        console.log('GAS result:', result);
        
        // GASからのレスポンスをJSONとしてパース
        try {
          const jsonResult = JSON.parse(result);
          return jsonResult;
        } catch (parseError) {
          // JSONパースに失敗した場合は成功として扱う（GASの仕様）
          console.log('Response is not JSON, treating as success:', result);
          return { success: true, message: result };
        }
      } catch (error) {
        console.error('Spreadsheet save error:', error);
        return { success: false, error: error.message };
      }
    }
    
    // フォーム状態リセット
    function resetFormState() {
      // 来店予約の詳細を非表示にする
      const visitReservationDetails = document.getElementById('visit-reservation-details');
      const visitReservationNotice = document.getElementById('visit-reservation-notice');
      if (visitReservationDetails) visitReservationDetails.style.display = 'none';
      if (visitReservationNotice) visitReservationNotice.style.display = 'none';
      // 選択されたペットをクリア
      selectedPets = [];
      updateSelectedPetsDisplay();
      // hidden inputもクリア
      updateHiddenPetInputs();
    }
    
    // フォームデータを整理する関数
    function prepareFormData(formType, formData) {
      const data = {
        formType: formType,
        name: formData.get('name') || '',
        email: formData.get('email') || '',
        phone: formData.get('phone') || '',
        content: formData.get('content') || ''
      };
      
      if (formType === 'pet') {
        data.inquiryType = formData.get('inquiry-type') || '';
        data.visitReservation = formData.get('visit-reservation') === '1';
        data.visitDate = formData.get('visit-date') || '';
        data.visitTime = formData.get('visit-time') || '';
        
        // デバッグ用ログ追加
        console.log('=== DEBUG: prepareFormData for pet ===');
        console.log('selectedPets array:', selectedPets);
        console.log('selectedPets length:', selectedPets.length);
        
        data.selectedPets = selectedPets.map(pet => 
          `${pet.number} ${pet.breed} 【${pet.store}】`
        ).join(', ');
        
        console.log('Final selectedPets string:', data.selectedPets);
        console.log('=== END DEBUG ===');
        
      } else if (formType === 'job') {
        data.inquiryType = formData.get('inquiry-type') || '';
      }
      
      return data;
    }
    
    // ペット選択モーダル機能
    const petSelectButton = document.getElementById('pet-select-button');
    const petModal = document.getElementById('pet-select-modal');
    const petModalClose = document.getElementById('pet-modal-close');
    const petModalAdd = document.getElementById('pet-modal-add');
    const selectedPetsContainer = document.getElementById('selected-pets');
    const petTabs = document.querySelectorAll('.pet-tab');
    const petGrids = document.querySelectorAll('.pet-grid');
    
    // 選択されたペットの情報を保持
    let selectedPets = [];
    
    // モーダルを開く
    petSelectButton.addEventListener('click', function() {
      petModal.classList.add('active');
      document.body.style.overflow = 'hidden';
    });
    
    // モーダルを閉じる
    function closePetModal() {
      petModal.classList.remove('active');
      document.body.style.overflow = '';
    }
    
    petModalClose.addEventListener('click', closePetModal);
    
    // モーダルのオーバーレイクリックで閉じる
    petModal.addEventListener('click', function(e) {
      if (e.target === petModal || e.target.classList.contains('pet-modal__overlay')) {
        closePetModal();
      }
    });
    
    // ペットタブ切り替え
    petTabs.forEach(tab => {
      tab.addEventListener('click', function() {
        const targetTab = this.getAttribute('data-tab');
        
        // すべてのタブからactiveクラスを削除
        petTabs.forEach(t => t.classList.remove('active'));
        petGrids.forEach(g => g.classList.remove('active'));
        
        // クリックされたタブにactiveクラスを追加
        this.classList.add('active');
        const targetGrid = document.querySelector(`[data-grid="${targetTab}"]`);
        if (targetGrid) {
          targetGrid.classList.add('active');
        }
      });
    });
    
    // ペットカードクリック処理
    document.querySelectorAll('.pet-card').forEach(card => {
      card.addEventListener('click', function(e) {
        // チェックボックスをクリックした場合は、カードクリック処理をスキップ
        if (e.target.type === 'checkbox' || e.target.classList.contains('pet-card__checkbox-label')) {
          return;
        }
        
        // カードクリック時にチェックボックスをトグル
        const checkbox = this.querySelector('input[type="checkbox"]');
        if (checkbox) {
          checkbox.checked = !checkbox.checked;
          checkbox.dispatchEvent(new Event('change'));
        }
      });
    });
    
    // チェックボックスの変更処理
    document.querySelectorAll('input[name="selected-pets"]').forEach(checkbox => {
      checkbox.addEventListener('change', function() {
        const petId = this.value;
        const petCard = this.closest('.pet-card');
        
        if (this.checked) {
          // ペット情報を取得
          const petNumberRaw = petCard.querySelector('.pet-card__number').textContent.replace('お問い合わせ番号：', '');
          const petNumber = petNumberRaw.replace(/^0+/, '') || petNumberRaw;
          const petBreed = petCard.querySelector('.pet-card__breed').textContent.trim();
          const petStore = petCard.querySelector('.pet-card__store').textContent.replace('店舗：', '');
          
          // 来店予約がチェックされていて、既に選択済みペットがある場合の店舗制限チェック
          const isVisitReservation = document.getElementById('pet-visit-reservation')?.checked || false;
          if (isVisitReservation && selectedPets.length > 0) {
            const existingStore = selectedPets[0].store;
            if (petStore !== existingStore) {
              // 異なる店舗のペットを選択しようとした場合
              this.checked = false;
              alert(`来店予約では同じ店舗のペットのみしか選択できません。現在は${existingStore}のペットが選択されています。`);
              return;
            }
          }
          
          // 選択されたペット情報を追加
          selectedPets.push({
            id: petId,
            number: petNumber,
            breed: petBreed,
            store: petStore
          });
          
          // 来店予約チェック時は、新しく選択されたペットの店舗に基づいて制限を更新
          if (isVisitReservation) {
            updatePetModalStoreRestriction();
          }
        } else {
          // 選択を解除
          selectedPets = selectedPets.filter(pet => pet.id !== petId);
          
          // 来店予約チェック時で、すべてのペットが解除された場合は制限をクリア
          const isVisitReservation = document.getElementById('pet-visit-reservation')?.checked || false;
          if (isVisitReservation && selectedPets.length === 0) {
            clearPetModalStoreRestriction();
          }
        }
      });
    });
    
    // お問い合わせに追加ボタンの処理
    petModalAdd.addEventListener('click', function() {
      // 選択されたペットの表示を更新
      updateSelectedPetsDisplay();
      
      // モーダルを閉じる
      closePetModal();
    });
    
    // 選択されたペットの表示を更新
    function updateSelectedPetsDisplay() {
      selectedPetsContainer.innerHTML = '';
      
      // hidden input要素を更新
      updateHiddenPetInputs();
      
      selectedPets.forEach(pet => {
        const petElement = document.createElement('div');
        petElement.className = 'selected-pet';
        
        // 確実にflexレイアウトが適用されるようにインラインスタイルも追加
        petElement.style.cssText = `
          display: flex;
          align-items: center;
          gap: 8px;
          width: 100%;
          box-sizing: border-box;
          background-color: #F3F4F6;
          border: 1px solid #D1D5DB;
          border-radius: 4px;
          padding: 8px 12px;
          margin-bottom: 8px;
          font-size: 14px;
          color: #111827;
        `;
        
        // 削除ボタンを作成
        const removeButton = document.createElement('button');
        removeButton.type = 'button';
        removeButton.className = 'selected-pet__remove';
        removeButton.setAttribute('data-pet-id', pet.id);
        removeButton.innerHTML = '×';
        removeButton.title = 'このペットを削除';
        
        // 確実にスタイルが適用されるようにインラインスタイルも追加
        removeButton.style.cssText = `
          background-color: #7f7f7f;
          color: #FFFFFF;
          border: none;
          border-radius: 50%;
          width: 20px;
          height: 20px;
          min-width: 20px;
          min-height: 20px;
          display: flex;
          align-items: center;
          justify-content: center;
          cursor: pointer;
          font-size: 12px;
          font-weight: bold;
          line-height: 1;
          transition: all 0.3s ease;
          flex-shrink: 0;
        `;
        
        // ペット情報テキスト
        const petText = document.createElement('span');
        petText.className = 'selected-pet__text';
        petText.textContent = `${pet.number} ${pet.breed} 【${pet.store}】`;
        
        // テキストのスタイルも確実に適用
        petText.style.cssText = `
          flex: 1;
          font-size: 14px;
          color: #111827;
          line-height: 1.4;
          overflow: hidden;
          text-overflow: ellipsis;
        `;
        
        // 削除ボタンのクリックイベント
        removeButton.addEventListener('click', function() {
          const petIdToRemove = this.getAttribute('data-pet-id');
          removePetFromSelection(petIdToRemove);
        });
        
        // ホバーエフェクトを追加
        removeButton.addEventListener('mouseenter', function() {
          this.style.backgroundColor = '#666666';
          this.style.transform = 'scale(1.1)';
        });
        
        removeButton.addEventListener('mouseleave', function() {
          this.style.backgroundColor = '#7f7f7f';
          this.style.transform = 'scale(1)';
        });
        
        removeButton.addEventListener('mousedown', function() {
          this.style.transform = 'scale(0.95)';
        });
        
        removeButton.addEventListener('mouseup', function() {
          this.style.transform = 'scale(1.1)';
        });
        
        petElement.appendChild(removeButton);
        petElement.appendChild(petText);
        selectedPetsContainer.appendChild(petElement);
      });
    }
    
    // 選択からペットを削除する関数
    function removePetFromSelection(petId) {
      // selectedPets配列から削除
      selectedPets = selectedPets.filter(pet => pet.id !== petId);
      
      // モーダル内のチェックボックス状態を更新
      const checkbox = document.querySelector(`input[name="selected-pets"][value="${petId}"]`);
      if (checkbox) {
        checkbox.checked = false;
      }
      
      // 表示を更新
      updateSelectedPetsDisplay();
      
      // 来店予約チェック時で、すべてのペットが削除された場合は制限をクリア
      const isVisitReservation = document.getElementById('pet-visit-reservation')?.checked || false;
      if (isVisitReservation && selectedPets.length === 0) {
        clearPetModalStoreRestriction();
      } else if (isVisitReservation && selectedPets.length > 0) {
        // まだペットが残っている場合は制限を更新
        updatePetModalStoreRestriction();
      }
      
      console.log('Pet removed:', petId, 'Remaining pets:', selectedPets.length);
    }
    
    // hidden input要素を更新する関数
    function updateHiddenPetInputs() {
      const petForm = document.getElementById('pet-form');
      if (!petForm) return;
      
      // 既存のhidden input要素を削除
      const existingInputs = petForm.querySelectorAll('input[name="selected-pets"]');
      existingInputs.forEach(input => input.remove());
      
      // 選択されたペットごとにhidden input要素を作成
      selectedPets.forEach(pet => {
        const hiddenInput = document.createElement('input');
        hiddenInput.type = 'hidden';
        hiddenInput.name = 'selected-pets';
        hiddenInput.value = `${pet.number} ${pet.breed} 【${pet.store}】`;
        petForm.appendChild(hiddenInput);
      });
      
      console.log('Updated hidden pet inputs:', selectedPets.length, 'pets');
    }
    
    // 来店予約時の店舗制限処理
    function handleStoreRestrictionForVisitReservation() {
      if (selectedPets.length === 0) return;
      
      // この関数が呼ばれる時点では単一店舗のペットのみが選択されている
      // （複数店舗の場合は事前にチェックボックスがブロックされている）
      console.log('来店予約チェック：単一店舗のペット選択を確認');
    }
    
    // ペットモーダル内の店舗制限表示更新
    function updatePetModalStoreRestriction() {
      const isVisitReservation = document.getElementById('pet-visit-reservation')?.checked || false;
      
      if (!isVisitReservation) {
        clearPetModalStoreRestriction();
        return;
      }
      
      if (selectedPets.length === 0) return;
      
      // 選択済みペットの店舗を取得
      const allowedStore = selectedPets[0].store;
      
      // すべてのペットカードを確認
      document.querySelectorAll('.pet-card').forEach(card => {
        const petStore = card.querySelector('.pet-card__store')?.textContent?.replace('店舗：', '') || '';
        const checkbox = card.querySelector('input[type="checkbox"]');
        
        if (petStore !== allowedStore && !checkbox.checked) {
          // 異なる店舗かつ未選択のペットをグレーアウト+選択不可
          card.classList.add('pet-card--disabled');
          checkbox.disabled = true;
          card.style.opacity = '0.5';
          card.style.pointerEvents = 'none';
        }
      });
    }
    
    // ペットモーダル内の店舗制限をクリア
    function clearPetModalStoreRestriction() {
      document.querySelectorAll('.pet-card').forEach(card => {
        const checkbox = card.querySelector('input[type="checkbox"]');
        card.classList.remove('pet-card--disabled');
        checkbox.disabled = false;
        card.style.opacity = '';
        card.style.pointerEvents = '';
      });
    }
    
    // お問い合わせ種別の変更処理
    const petInquiryTypeSelect = document.getElementById('pet-inquiry-type');
    const visitReservationCheckbox = document.getElementById('pet-visit-reservation');
    
    if (petInquiryTypeSelect && visitReservationCheckbox) {
      petInquiryTypeSelect.addEventListener('change', function() {
        if (this.value === '来店予約をする') {
          // 来店予約チェックボックスを自動でONにする
          visitReservationCheckbox.checked = true;
          // チェック状態の変更イベントを手動で発火
          const changeEvent = new Event('change');
          visitReservationCheckbox.dispatchEvent(changeEvent);
        }
      });
    }

    // 来店予約チェックボックスの処理
    const visitReservationDetails = document.getElementById('visit-reservation-details');
    const visitReservationNotice = document.getElementById('visit-reservation-notice');
    
    if (visitReservationCheckbox && visitReservationDetails && visitReservationNotice) {
      visitReservationCheckbox.addEventListener('change', function() {
        const checkbox = this;
        if (checkbox.checked) {
          // 複数店舗のペットが選択されている場合のチェック
          if (selectedPets.length > 0) {
            // 店舗を確認
            const storeGroups = {};
            selectedPets.forEach(pet => {
              if (!storeGroups[pet.store]) {
                storeGroups[pet.store] = [];
              }
              storeGroups[pet.store].push(pet);
            });
            
            const storeNames = Object.keys(storeGroups);
            
            if (storeNames.length > 1) {
              // 複数店舗のペットが選択されている場合、チェックを無効化
              checkbox.checked = false;
              
              const storeList = storeNames.join('、');
              alert(`来店予約では同じ店舗のペットのみしか選択できません。\n\n現在、以下の店舗のペットが選択されています：\n${storeList}\n\n下記のお問い合わせ番号欄にある×ボタンから不要なペットを削除して、1つの店舗のペットのみになるよう調整してから、再度来店予約をチェックしてください。`);
              
              return; // 処理を終了
            }
          }
          
          visitReservationDetails.style.display = 'block';
          visitReservationNotice.style.display = 'block';
          
          // 来店予約チェック時：異店舗ペットを自動解除（この時点では単一店舗のみ）
          handleStoreRestrictionForVisitReservation();
          
          // ペットモーダル内の表示を更新（店舗制限適用）
          updatePetModalStoreRestriction();
        } else {
          visitReservationDetails.style.display = 'none';
          visitReservationNotice.style.display = 'none';
          // チェックを外した時に入力値をリセット
          const visitDate = document.getElementById('visit-date');
          const visitTime = document.getElementById('visit-time');
          if (visitDate) visitDate.value = '';
          if (visitTime) visitTime.value = '';
          
          // 来店予約チェック解除時：店舗制限を解除
          clearPetModalStoreRestriction();
        }
      });
    }
  });

  // ページ読み込み時のハッシュスクロール処理（外部リンク対応）
  document.addEventListener('DOMContentLoaded', function() {
    const hash = window.location.hash;
    if (hash) {
      setTimeout(() => {
        const targetElement = document.getElementById(hash.substring(1));
        if (targetElement) {
          const screenWidth = window.innerWidth;
          let yOffset;
          if (screenWidth < 768) {
            yOffset = -100; // sm未満（モバイル）
          } else if (screenWidth >= 1600) {
            yOffset = -180; // 大画面
          } else {
            yOffset = -160; // sm以降〜1600px未満
          }
          const y = targetElement.getBoundingClientRect().top + window.pageYOffset + yOffset;
          window.scrollTo({ top: y, behavior: 'smooth' });
        }
      }, 100);
    }
  });

  // contact-methodsのカスタムスクロール処理
  document.addEventListener('DOMContentLoaded', function() {
    const contactMethodLinks = document.querySelectorAll('.contact-method-link[href^="#"]');
    
    contactMethodLinks.forEach(link => {
      link.addEventListener('click', function(e) {
        e.preventDefault();
        
        const targetId = this.getAttribute('href').substring(1);
        const targetElement = document.getElementById(targetId);
        
        if (targetElement) {
          // レスポンシブに対応したオフセット調整（見出しがヘッダーと被らないように20px分上に調整）
          const screenWidth = window.innerWidth;
          let yOffset;
          if (screenWidth < 768) {
            yOffset = -100; // sm未満（モバイル）
          } else if (screenWidth >= 1600) {
            yOffset = -180; // 大画面
          } else {
            yOffset = -160; // sm以降〜1600px未満
          }
          
          const y = targetElement.getBoundingClientRect().top + window.pageYOffset + yOffset;
          window.scrollTo({ top: y, behavior: 'smooth' });
        }
      });
    });
  });

  // モーダル表示関数
  function showSuccessModal() {
    const modal = document.getElementById('success-modal');
    if (modal) {
      modal.style.display = 'block';
    }
  }

  function showErrorModal() {
    const modal = document.getElementById('error-modal');
    if (modal) {
      modal.style.display = 'block';
    }
  }

  function hideModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
      modal.style.display = 'none';
    }
  }

  // モーダル閉じるボタンのイベントリスナー
  document.getElementById('success-modal-close')?.addEventListener('click', function() {
    hideModal('success-modal');
  });

  document.getElementById('error-modal-close')?.addEventListener('click', function() {
    hideModal('error-modal');
  });

  // モーダルオーバーレイクリックで閉じる
  document.getElementById('success-modal')?.addEventListener('click', function(e) {
    if (e.target === this || e.target.classList.contains('success-modal__overlay')) {
      hideModal('success-modal');
    }
  });

  document.getElementById('error-modal')?.addEventListener('click', function(e) {
    if (e.target === this || e.target.classList.contains('error-modal__overlay')) {
      hideModal('error-modal');
    }
  });
</script>