---
import Layout from '../../../layouts/Layout.astro';
import PetCard from '../../../components/pets/PetCard.astro';
import BreedTags from '../../../components/pets/BreedTags.astro';
import HeroSection from '../../../components/sections/common/HeroSection.astro';
import BannerSection from '../../../components/sections/common/BannerSection.astro';
import ContactCTASection from '../../../components/sections/common/ContactCTASection.astro';
import ViewMoreButton from '../../../components/ui/buttons/ViewMoreButton.astro';
import { getLatestPetsByType } from '../../../lib/api/pets/queries';
import { getBreedsByAnimalType } from '../../../lib/api/pets';
import { getMixBreedsByAnimalType } from '../../../lib/api/pets/navigation';
import '../../../styles/layout/pets-grid.scss';

// 全ての猫のデータを取得
const allCats = await getLatestPetsByType('cat');

// 初期表示用（最初の18件）
const initialCats = allCats.slice(0, 18);

// Navigation.astroと全く同じロジックで猫の品種データを取得
const { pureBreeds: catBreeds, hasMix: catHasMix } = await getBreedsByAnimalType('cat');
const submenuItems = [{ type: 'cat', breeds: catBreeds, hasMix: catHasMix }];

// Navigation.astroと同じ方式でミックス品種を取得
const mixBreeds = await getMixBreedsByAnimalType(submenuItems);

// 品種タグ用データを作成（ヘッダーと全く同じデータ）
const finalCatBreeds = [];

// ul.submenu-breedsのデータを追加
catBreeds.forEach(breed => {
  finalCatBreeds.push({
    breedTypeJa: breed.name,
    breedTypeEn: breed.url.split('/').pop(),
    classification: 'bloodline'
  });
});

// ul.mix-breeds-submenuのデータを追加（重複除去）
const catMixBreeds = mixBreeds.find(mb => mb.type === 'cat');
if (catMixBreeds && catMixBreeds.breeds) {
  // 既に追加されたbreedTypeJaを追跡するSet
  const addedBreedNames = new Set(finalCatBreeds.map(breed => breed.breedTypeJa));
  
  catMixBreeds.breeds.forEach(mixBreed => {
    // 重複チェック
    if (!addedBreedNames.has(mixBreed.name)) {
      const breedEn = mixBreed.url.split('/').pop();
      finalCatBreeds.push({
        breedTypeJa: mixBreed.name,
        breedTypeEn: breedEn,
        classification: 'MIX'
      });
      addedBreedNames.add(mixBreed.name);
    }
  });
}

console.log('ヘッダーと同じ猫品種データ:', finalCatBreeds);

// パンくずリストのデータ
const breadcrumbItems = [
  { label: 'ホーム', href: '/' },
  { label: '子犬・子猫を探す', href: '/search' },
  { label: '子猫を探す' }
];
---

<Layout title="子猫を探す | カトレア">
  <main>
    <HeroSection 
      title="子猫を探す"
      image="/images/backgrounds/img_bg-hero_search-cats-01.webp"
      breadcrumbItems={breadcrumbItems}
    />
    <BreedTags breeds={finalCatBreeds} animalType="cat" />
    <section class="pets-section pets-section--with-breed-tags">
      <div class="container">
        <div class="pets-count">
          <span class="pets-count__number">{allCats.length}</span><span class="pets-count__unit">件</span>
        </div>
        <div class="pets-grid" data-all-pets={JSON.stringify(allCats)}>
          {initialCats.map((pet) => <PetCard pet={pet} />)}
        </div>
        {allCats.length > 18 && (
          <ViewMoreButton />
        )}
      </div>
    </section>
    
    <BannerSection />
    <ContactCTASection />
  </main>
</Layout>

<script>
  // VIEW MORE button functionality with static data
  document.addEventListener('DOMContentLoaded', function() {
    const viewMoreButton = document.getElementById('viewMoreButton');
    const petsGrid = document.querySelector('.pets-grid');
    
    if (!viewMoreButton || !petsGrid) return;
    
    // Get all pets data from the grid
    const allPetsData = JSON.parse(petsGrid.dataset.allPets || '[]');
    let currentlyShown = 18;
    const itemsPerPage = 18;
    
    viewMoreButton.addEventListener('click', function() {
      const button = this;
      
      // Show loading state
      button.classList.add('loading');
      button.disabled = true;
      
      // Simulate loading delay for better UX
      setTimeout(() => {
        // Calculate next batch
        const nextBatch = allPetsData.slice(currentlyShown, currentlyShown + itemsPerPage);
        
        // Create and append new pet cards
        nextBatch.forEach(pet => {
          const petCard = document.createElement('div');
          petCard.innerHTML = `
            <a href="/search/cats/${pet.classification === 'mix' ? 'mix/' : ''}${encodeURIComponent((pet.breedTypeEn || '').toLowerCase())}/${pet.id}" class="pet-card">
              <div class="pet-card__image">
                <img src="${pet.imageUrl01}" alt="${pet.name}" loading="lazy" />
              </div>
              <div class="pet-card__content">
                <h3 class="pet-card__name">${pet.name}</h3>
                <p class="pet-card__breed">${pet.breedTypeJa}</p>
                <p class="pet-card__gender">${pet.gender}</p>
              </div>
            </a>
          `;
          petsGrid.appendChild(petCard.firstElementChild);
        });
        
        currentlyShown += itemsPerPage;
        
        // Hide button if no more items
        if (currentlyShown >= allPetsData.length) {
          button.style.display = 'none';
        }
        
        // Remove loading state
        button.classList.remove('loading');
        button.disabled = false;
      }, 500);
    });
  });
</script>


<style lang="scss">
  @import '../../../styles/variables';
  @import '../../../styles/mixins';

  .pets-section {
    @include section-padding;
    background-color: $color-background;
    min-height: calc(100vh - 400px);
  }
  
  // 品種タグがある場合のpadding-top調整
  .pets-section--with-breed-tags {
    padding-top: rem(50);
  }
</style>
