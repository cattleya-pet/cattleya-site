---
import Layout from '../../../layouts/Layout.astro';
import PetCard from '../../../components/pets/PetCard.astro';
import HeroSection from '../../../components/sections/common/HeroSection.astro';
import BannerSection from '../../../components/sections/common/BannerSection.astro';
import ContactCTASection from '../../../components/sections/common/ContactCTASection.astro';
import ViewMoreButton from '../../../components/ui/buttons/ViewMoreButton.astro';
import { getLatestPetsByType } from '../../../lib/api/pets/queries';
import { getBreedsByAnimalType } from '../../../lib/api/pets';
import { getImageUrl } from '../../../lib/utils/image';
import '../../../styles/layout/pets-grid.scss';

export async function getStaticPaths() {
  try {
    // 猫の品種データを取得
    const { pureBreeds } = await getBreedsByAnimalType('cat');
    console.log('[getStaticPaths] 猫の品種数:', pureBreeds.length);
    
    if (!pureBreeds || pureBreeds.length === 0) {
      console.log('[getStaticPaths] 猫の品種データがありません');
      return [];
    }
    
    const paths = pureBreeds.map((breed) => {
      const breedTypeEn = breed.url.split('/').pop();
      console.log('[getStaticPaths] 生成する猫パス:', breedTypeEn, '品種名:', breed.name);
      return {
        params: { 
          breedTypeEn: breedTypeEn 
        }
      };
    });
    
    console.log('[getStaticPaths] 生成される猫パス数:', paths.length);
    return paths;
  } catch (error) {
    console.error('[getStaticPaths] 猫エラー:', error);
    return [];
  }
}

const { breedTypeEn } = Astro.params;

console.log('=== 猫品種ページ開始 ===');
console.log('breedTypeEn:', breedTypeEn);

// この品種の猫を取得（全フィールド）
const allCats = await getLatestPetsByType('cat');
console.log(`[${breedTypeEn}] 全猫データ数:`, allCats.length);
console.log(`[${breedTypeEn}] 探している品種:`, breedTypeEn);

// データサンプルを確認
if (allCats.length > 0) {
  console.log(`[${breedTypeEn}] 猫データサンプル:`, {
    breedTypeEn: allCats[0].breedTypeEn,
    breedTypeJa: allCats[0].breedTypeJa,
    classification: allCats[0].classification
  });
  
  // 最初の数件の品種を確認
  const firstFewBreeds = allCats.slice(0, 5).map(pet => ({
    breedTypeEn: pet.breedTypeEn,
    breedTypeJa: pet.breedTypeJa,
    classification: pet.classification
  }));
  console.log(`[${breedTypeEn}] 最初の5件の品種データ:`, firstFewBreeds);
  
  // 血統書付きの品種一覧を確認
  const bloodlineBreeds = [...new Set(allCats
    .filter(pet => pet.classification === 'bloodline')
    .map(pet => pet.breedTypeEn)
  )];
  console.log(`[${breedTypeEn}] 血統書付き品種一覧:`, bloodlineBreeds);
}

const breedCats = allCats.filter(pet => 
  pet.classification === 'bloodline' && 
  pet.breedTypeEn?.toLowerCase() === breedTypeEn?.toLowerCase()
);

console.log(`[${breedTypeEn}] フィルタ後の猫数:`, breedCats.length);

// もしフィルタ結果が0なら、部分一致も試してみる
if (breedCats.length === 0) {
  const partialMatches = allCats.filter(pet => 
    pet.classification === 'bloodline' && 
    pet.breedTypeEn?.toLowerCase().includes(breedTypeEn.toLowerCase())
  );
  console.log(`[${breedTypeEn}] 部分一致結果:`, partialMatches.length);
  
  const exactClassificationOnly = allCats.filter(pet => 
    pet.classification === 'bloodline'
  );
  console.log(`[${breedTypeEn}] 血統書付きのみ:`, exactClassificationOnly.length);
}

// 初期表示用（最初の18件）
const initialCats = breedCats.slice(0, 18);

// 品種名を取得（日本語）
// まず品種データから日本語名を探す
const { pureBreeds } = await getBreedsByAnimalType('cat');
const breedData = pureBreeds.find(breed => breed.url.split('/').pop() === breedTypeEn);
const breedTypeJa = breedData ? breedData.name : (initialCats.length > 0 ? initialCats[0].breedTypeJa : breedTypeEn);

// HeroSection用の画像（先頭の個体の画像）
const heroImage = initialCats.length > 0 
  ? getImageUrl(initialCats[0].imageUrl01, 800, 600)
  : '/images/backgrounds/img_bg-hero_search-cats-01.webp';

// パンくずリストのデータ
const breadcrumbItems = [
  { label: 'ホーム', href: '/' },
  { label: '子犬・子猫を探す', href: '/search' },
  { label: '子猫を探す', href: '/search/cats' },
  { label: breedTypeJa }
];
---

<Layout title={`${breedTypeJa} | 子猫を探す | カトレア`}>
  <main>
    <HeroSection 
      title={breedTypeJa}
      image={heroImage}
      breadcrumbItems={breadcrumbItems}
      isPetImage={initialCats.length > 0}
    />
    <section class="pets-section">
      <div class="container">
        {initialCats.length > 0 ? (
          <>
            <div class="pets-count">
              <span class="pets-count__number">{breedCats.length}</span><span class="pets-count__unit">件</span>
            </div>
            <div class="pets-grid" data-all-pets={JSON.stringify(breedCats)}>
              {initialCats.map((pet) => <PetCard pet={pet} />)}
            </div>
            {breedCats.length > 18 && (
              <ViewMoreButton />
            )}
          </>
        ) : (
          <div class="no-pets-message">
            <p>現在、{breedTypeJa}の子猫はおりません。</p>
            <p><a href="/search/cats">他の子猫を見る</a></p>
          </div>
        )}
      </div>
    </section>
    
    <BannerSection />
    <ContactCTASection />
  </main>
</Layout>

<script>
  // VIEW MORE button functionality with static data
  document.addEventListener('DOMContentLoaded', function() {
    const viewMoreButton = document.getElementById('viewMoreButton');
    const petsGrid = document.querySelector('.pets-grid');
    
    if (!viewMoreButton || !petsGrid) return;
    
    // Get all pets data from the grid
    const allPetsData = JSON.parse(petsGrid.dataset.allPets || '[]');
    let currentlyShown = 18;
    const itemsPerPage = 18;
    
    viewMoreButton.addEventListener('click', function() {
      const button = this;
      
      // Show loading state
      button.classList.add('loading');
      button.disabled = true;
      
      // Simulate loading delay for better UX
      setTimeout(() => {
        // Calculate next batch
        const nextBatch = allPetsData.slice(currentlyShown, currentlyShown + itemsPerPage);
        
        // Create and append new pet cards
        nextBatch.forEach(pet => {
          const petCard = document.createElement('div');
          petCard.innerHTML = `
            <a href="/search/cats/${pet.classification === 'mix' ? 'mix/' : ''}${encodeURIComponent((pet.breedTypeEn || '').toLowerCase())}/${pet.id}" class="pet-card">
              <div class="pet-card__image">
                <img src="${pet.imageUrl01}" alt="${pet.name}" loading="lazy" />
              </div>
              <div class="pet-card__content">
                <h3 class="pet-card__name">${pet.name}</h3>
                <p class="pet-card__breed">${pet.breedTypeJa}</p>
                <p class="pet-card__gender">${pet.gender}</p>
              </div>
            </a>
          `;
          petsGrid.appendChild(petCard.firstElementChild);
        });
        
        currentlyShown += itemsPerPage;
        
        // Hide button if no more items
        if (currentlyShown >= allPetsData.length) {
          button.style.display = 'none';
        }
        
        // Remove loading state
        button.classList.remove('loading');
        button.disabled = false;
      }, 500);
    });
  });
</script>


<style lang="scss">
  @import '../../../styles/variables';
  @import '../../../styles/mixins';

  .pets-section {
    @include section-padding;
    background-color: $color-background;
    min-height: calc(100vh - 400px);
  }

  .no-pets-message {
    text-align: center;
    padding: rem(60) rem(20);
    
    p {
      margin-bottom: rem(20);
      font-size: rem(18);
      color: $color-text;
      
      &:last-child {
        margin-bottom: 0;
      }
      
      a {
        color: $color-primary;
        text-decoration: none;
        
        &:hover {
          text-decoration: underline;
        }
      }
    }
  }
</style>
