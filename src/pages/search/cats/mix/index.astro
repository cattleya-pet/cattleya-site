---
import Layout from '../../../../layouts/Layout.astro';
import PetCard from '../../../../components/pets/PetCard.astro';
import BreedTags from '../../../../components/pets/BreedTags.astro';
import HeroSection from '../../../../components/sections/common/HeroSection.astro';
import BannerSection from '../../../../components/sections/common/BannerSection.astro';
import ContactCTASection from '../../../../components/sections/common/ContactCTASection.astro';
import ViewMoreButton from '../../../../components/ui/buttons/ViewMoreButton.astro';
import { getLatestPetsByType } from '../../../../lib/api/pets/queries';
import { getBreedsByAnimalType } from '../../../../lib/api/pets';
import { getMixBreedsByAnimalType } from '../../../../lib/api/pets/navigation';
import { getImageUrl } from '../../../../lib/utils/image';
import '../../../../styles/layout/pets-grid.scss';

// 全ミックス猫を取得
const allCats = await getLatestPetsByType('cat');
const mixCats = allCats.filter(pet => pet.classification === 'mix');

// 初期表示用（最初の24件）
const initialCats = mixCats.slice(0, 24);

console.log('ミックス猫総数:', mixCats.length);
console.log('初期表示ミックス猫数:', initialCats.length);

// ミックス猫の品種リストを取得（ヘッダーメニューと同じロジック）
const { pureBreeds, hasMix } = await getBreedsByAnimalType('cat');
const submenuItems = [{ type: 'cat', breeds: pureBreeds, hasMix: hasMix }];

// Navigation.astroと同じ方式でミックス品種を取得
const mixBreeds = await getMixBreedsByAnimalType(submenuItems);

// 品種タグ用データを作成（ミックス品種のみ）
const finalMixBreeds = [];

// ul.mix-breeds-submenuのデータを追加（重複除去）
const catMixBreeds = mixBreeds.find(mb => mb.type === 'cat');
if (catMixBreeds && catMixBreeds.breeds) {
  catMixBreeds.breeds.forEach(mixBreed => {
    const breedEn = mixBreed.url.split('/').pop();
    finalMixBreeds.push({
      breedTypeJa: mixBreed.name,
      breedTypeEn: breedEn,
      classification: 'MIX'
    });
  });
}

console.log('ヘッダーと同じミックス猫品種データ:', finalMixBreeds);

// HeroSection用の画像（先頭のミックス個体の画像）
const placeholderImage = '/images/ui/img_loading-pet-image-01.webp';
const heroImage = initialCats.length > 0 
  ? (initialCats[0].imageUrl01 ? getImageUrl(initialCats[0].imageUrl01, 800, 600) : placeholderImage)
  : '/images/backgrounds/img_bg-hero_search-cats-01.webp';

// パンくずリストのデータ
const breadcrumbItems = [
  { label: 'ホーム', href: '/' },
  { label: '子犬・子猫を探す', href: '/search' },
  { label: '子猫を探す', href: '/search/cats' },
  { label: 'ミックス' }
];
---

<Layout title="ミックス | 子猫を探す | カトレア">
  <main>
    <HeroSection 
      title="ミックス"
      image={heroImage}
      breadcrumbItems={breadcrumbItems}
      isPetImage={initialCats.length > 0}
    />
    <BreedTags breeds={finalMixBreeds} animalType="cat" />
    <section class="pets-section pets-section--with-breed-tags">
      <div class="container">
        {initialCats.length > 0 ? (
          <>
            <div class="pets-count">
              <span class="pets-count__number">{mixCats.length}</span><span class="pets-count__unit">件</span>
            </div>
            <div class="pets-grid" data-all-pets={JSON.stringify(mixCats)}>
              {initialCats.map((pet) => <PetCard pet={pet} />)}
            </div>
            {mixCats.length > 24 && (
              <ViewMoreButton />
            )}
          </>
        ) : (
          <div class="no-pets-message">
            <p>現在、ミックスの子猫はおりません。</p>
            <p><a href="/search/cats">他の子猫を見る</a></p>
          </div>
        )}
      </div>
    </section>
    
    <BannerSection />
    <ContactCTASection />
  </main>
</Layout>

<script>
  // VIEW MORE button functionality with static data
  document.addEventListener('DOMContentLoaded', function() {
    const viewMoreButton = document.getElementById('viewMoreButton');
    const petsGrid = document.querySelector('.pets-grid');
    
    if (!viewMoreButton || !petsGrid) return;
    
    // Get all pets data from the grid
    const allPetsData = JSON.parse(petsGrid.dataset.allPets || '[]');
    let currentlyShown = 24;
    const itemsPerPage = 18;
    
    viewMoreButton.addEventListener('click', function() {
      const button = this;
      
      // Show loading state
      button.classList.add('loading');
      button.disabled = true;
      
      // Simulate loading delay for better UX
      setTimeout(() => {
        // Calculate next batch
        const nextBatch = allPetsData.slice(currentlyShown, currentlyShown + itemsPerPage);
        
        // Create and append new pet cards
        nextBatch.forEach(pet => {
          const petCard = document.createElement('div');
          petCard.innerHTML = `
            <a href="/search/cats/mix/${encodeURIComponent((pet.breedTypeEn || '').toLowerCase())}/${pet.id}" class="pet-card">
              <div class="pet-card__image">
                <img src="${pet.imageUrl01}" alt="${pet.name}" loading="lazy" />
              </div>
              <div class="pet-card__content">
                <h3 class="pet-card__name">${pet.name}</h3>
                <p class="pet-card__breed">${pet.breedTypeJa}</p>
                <p class="pet-card__gender">${pet.gender}</p>
              </div>
            </a>
          `;
          petsGrid.appendChild(petCard.firstElementChild);
        });
        
        currentlyShown += itemsPerPage;
        
        // Hide button if no more items
        if (currentlyShown >= allPetsData.length) {
          button.style.display = 'none';
        }
        
        // Remove loading state
        button.classList.remove('loading');
        button.disabled = false;
      }, 500);
    });
  });
</script>


<style lang="scss">
  @import '../../../../styles/variables';
  @import '../../../../styles/mixins';

  .pets-section {
    @include section-padding;
    background-color: $color-background;
    min-height: calc(100vh - 400px);
  }
  
  // 品種タグがある場合のpadding-top調整
  .pets-section--with-breed-tags {
    padding-top: rem(50);
  }

  .no-pets-message {
    text-align: center;
    padding: rem(60) rem(20);
    
    p {
      margin-bottom: rem(20);
      font-size: rem(18);
      color: $color-text;
      
      &:last-child {
        margin-bottom: 0;
      }
      
      a {
        color: $color-primary;
        text-decoration: none;
        
        &:hover {
          text-decoration: underline;
        }
      }
    }
  }
</style>
