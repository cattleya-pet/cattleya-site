---
import Layout from '../../../layouts/Layout.astro';
import PetCard from '../../../components/pets/PetCard.astro';
import HeroSection from '../../../components/sections/common/HeroSection.astro';
import ViewMoreButton from '../../../components/ui/buttons/ViewMoreButton.astro';
import BannerSection from '../../../components/sections/common/BannerSection.astro';
import ContactCTASection from '../../../components/sections/common/ContactCTASection.astro';
import { getLatestPetsByType } from '../../../lib/api/pets/queries';
import { getBreedsByAnimalType } from '../../../lib/api/pets';
import { getImageUrl } from '../../../lib/utils/image';
import '../../../styles/layout/pets-grid.scss';

export const prerender = true;

export async function getStaticPaths() {
  try {
    // 実際のデータから血統書付き犬の品種を取得
    const allDogs = await getLatestPetsByType('dog', 100);
    const bloodlineDogs = allDogs.filter(pet => pet.classification === 'bloodline');
    
    // 利用可能な品種名をすべて取得
    const availableBreeds = [...new Set(bloodlineDogs
      .map(pet => pet.breedTypeEn)
      .filter(breedTypeEn => breedTypeEn) // null/undefined を除外
    )];
    
    console.log('[getStaticPaths] 利用可能な品種:', availableBreeds);
    
    const paths = availableBreeds.map(breedTypeEn => ({
      params: { breedTypeEn: encodeURIComponent(breedTypeEn.toLowerCase()) }
    }));
    
    console.log('[getStaticPaths] 生成されるパス数:', paths.length);
    return paths;
  } catch (error) {
    console.error('[getStaticPaths] エラー:', error);
    // エラー時は最小限のパスを返す
    return [
      { params: { breedTypeEn: 'pti' } }
    ];
  }
}

const { breedTypeEn: rawBreedTypeEn } = Astro.params;
const breedTypeEn = decodeURIComponent(rawBreedTypeEn || '');

console.log('=== 品種ページ開始 ===');
console.log('breedTypeEn:', breedTypeEn);

// この品種の犬を取得（全フィールド）
const allDogs = await getLatestPetsByType('dog', 100);
console.log(`[${breedTypeEn}] 全犬データ数:`, allDogs.length);
console.log(`[${breedTypeEn}] 探している品種:`, breedTypeEn);

// データサンプルを確認
if (allDogs.length > 0) {
  console.log(`[${breedTypeEn}] 犬データサンプル:`, {
    breedTypeEn: allDogs[0].breedTypeEn,
    breedTypeJa: allDogs[0].breedTypeJa,
    classification: allDogs[0].classification
  });
  
  // 最初の数件の品種を確認
  const firstFewBreeds = allDogs.slice(0, 5).map(pet => ({
    breedTypeEn: pet.breedTypeEn,
    breedTypeJa: pet.breedTypeJa,
    classification: pet.classification
  }));
  console.log(`[${breedTypeEn}] 最初の5件の品種データ:`, firstFewBreeds);
  
  // 血統書付きの品種一覧を確認
  const bloodlineBreeds = [...new Set(allDogs
    .filter(pet => pet.classification === 'bloodline')
    .map(pet => pet.breedTypeEn)
  )];
  console.log(`[${breedTypeEn}] 血統書付き品種一覧:`, bloodlineBreeds);
}

const breedDogs = allDogs.filter(pet => 
  pet.classification === 'bloodline' && 
  pet.breedTypeEn?.toLowerCase() === breedTypeEn?.toLowerCase()
);

console.log(`[${breedTypeEn}] フィルタ後の犬数:`, breedDogs.length);

// もしフィルタ結果が0なら、部分一致も試してみる
if (breedDogs.length === 0) {
  const partialMatches = allDogs.filter(pet => 
    pet.classification === 'bloodline' && 
    pet.breedTypeEn?.toLowerCase().includes(breedTypeEn.toLowerCase())
  );
  console.log(`[${breedTypeEn}] 部分一致結果:`, partialMatches.length);
  
  const exactClassificationOnly = allDogs.filter(pet => 
    pet.classification === 'bloodline'
  );
  console.log(`[${breedTypeEn}] 血統書付きのみ:`, exactClassificationOnly.length);
}

// 初期表示は18匹
const initialDogs = breedDogs.slice(0, 18);

// 品種名を取得（日本語）
// まず品種データから日本語名を探す
const { pureBreeds } = await getBreedsByAnimalType('dog');
const breedData = pureBreeds.find(breed => breed.url.split('/').pop() === breedTypeEn);
const breedTypeJa = breedData ? breedData.name : (initialDogs.length > 0 ? initialDogs[0].breedTypeJa : breedTypeEn);

// HeroSection用の画像（先頭の個体の画像）
const heroImage = initialDogs.length > 0 
  ? getImageUrl(initialDogs[0].imageUrl01, 800, 600)
  : '/images/backgrounds/img_bg-hero_search-dogs-01.webp';

// パンくずリストのデータ
const breadcrumbItems = [
  { label: 'ホーム', href: '/' },
  { label: '子犬・子猫を探す', href: '/search' },
  { label: '子犬を探す', href: '/search/dogs' },
  { label: breedTypeJa }
];
---

<Layout title={`${breedTypeJa} | 子犬を探す | カトレア`}>
  <main>
    <HeroSection 
      title={breedTypeJa}
      image={heroImage}
      breadcrumbItems={breadcrumbItems}
      isPetImage={initialDogs.length > 0}
    />
    <section class="pets-section">
      <div class="container">
        {initialDogs.length > 0 ? (
          <>
            <div class="pets-grid">
              {initialDogs.map((pet) => <PetCard pet={pet} />)}
            </div>
            {breedDogs.length > 18 && <ViewMoreButton />}
          </>
        ) : (
          <div class="no-pets-message">
            <p>現在、{breedTypeJa}の子犬はおりません。</p>
            <p><a href="/search/dogs">他の子犬を見る</a></p>
          </div>
        )}
      </div>
    </section>
    
    <BannerSection />
    <ContactCTASection />
  </main>
</Layout>

<script define:vars={{ 
  initialDogsCount: initialDogs.length,
  totalDogsCount: breedDogs.length,
  breedTypeEn: breedTypeEn 
}}>
  // 初期表示時のVIEW MOREボタン表示制御
  const viewMoreButton = document.getElementById('viewMoreButton');
  
  // 初期状態で18匹未満またはデータがない場合はVIEW MOREボタンを非表示
  if (viewMoreButton) {
    if (totalDogsCount <= 18) {
      viewMoreButton.style.display = 'none';
    }
  }
</script>

<script>
  import { getImageUrl } from '../../../lib/utils/image';
  import { formatDate } from '../../../lib/utils/date';

  let offset = 18; // オフセット
  let isLoading = false; // 読み込み状態

  const viewMoreButton = document.getElementById('viewMoreButton');
  const petsGrid = document.querySelector('.pets-grid');

  if (viewMoreButton && petsGrid) {
    viewMoreButton.addEventListener('click', async () => {
      if (isLoading) return;
      
      isLoading = true;
      viewMoreButton.classList.add('loading');
      viewMoreButton.disabled = true;

      try {
        const apiUrl = `/api/pets?offset=${offset}&limit=18&animalType=dog&breedTypeEn=${breedTypeEn}&classification=bloodline`;
        const response = await fetch(apiUrl);
        const newPets = await response.json();

        if (newPets && newPets.length > 0) {
          // 新しいペットカードを追加
          newPets.forEach((pet) => {
            const petCardHTML = `
              <div class="pet-card" data-animal-type="${pet.animalType}">
                <div class="pet-card__inner">
                  <div class="pet-card__image-container">
                    <img
                      class="pet-card__image"
                      src="${getImageUrl(pet.imageUrl01, 600, 600)}"
                      alt="${pet.breedTypeJa}の写真"
                      loading="lazy"
                      width="600"
                      height="600"
                      onerror="this.src='/images/ui/img_loading-pet-image-01.webp'"
                    />
                  </div>
                  <div class="pet-card__info">
                    <h3 class="pet-card__title">
                      ${pet.breedTypeJa}
                      ${pet.gender === '男の子' ? '<span class="pet-card__gender male"><svg width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M15 0V5H14V1.733L8.871 6.817C9.201 7.297 9.47167 7.80367 9.683 8.337C9.89433 8.87033 10 9.42467 10 10C10 11.394 9.51533 12.576 8.546 13.546C7.57667 14.516 6.39533 15.0007 5.002 15C3.60867 14.9993 2.42667 14.5147 1.456 13.546C0.485333 12.5773 0 11.396 0 10.002C0 8.608 0.485 7.426 1.455 6.456C2.425 5.486 3.60667 5.00067 5 5C5.576 5 6.12733 5.105 6.654 5.315C7.18067 5.52433 7.682 5.79567 8.158 6.129L13.287 1H10V0H15ZM4.997 6C3.89167 6 2.949 6.39067 2.169 7.172C1.38967 7.954 1 8.89767 1 10.003C1 11.109 1.39067 12.0517 2.172 12.831C2.954 13.6103 3.89767 14 5.003 14C6.109 14 7.05167 13.6093 7.831 12.828C8.61033 12.046 9 11.1023 9 9.997C9 8.89167 8.60933 7.949 7.828 7.169C7.04667 6.389 6.103 5.99933 4.997 6Z" fill="#7398D5"/></svg></span>' : ''}
                      ${pet.gender === '女の子' ? '<span class="pet-card__gender female"><svg width="10" height="16" viewBox="0 0 10 16" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M4.5 16V14H2.5V13H4.5V9.977C3.222 9.83367 2.15233 9.288 1.291 8.34C0.430334 7.39133 0 6.27433 0 4.989C0 3.60033 0.486333 2.42167 1.459 1.453C2.431 0.484333 3.61133 0 5 0C6.38867 0 7.569 0.484333 8.541 1.453C9.513 2.42167 9.99933 3.60033 10 4.989C10 6.27433 9.56967 7.391 8.709 8.339C7.84767 9.28767 6.778 9.83367 5.5 9.977V13H7.5V14H5.5V16H4.5ZM5.003 9C6.109 9 7.05167 8.60933 7.831 7.828C8.61033 7.046 9 6.10233 9 4.997C9 3.89167 8.60933 2.949 7.828 2.169C7.04667 1.389 6.103 0.999333 4.997 1C3.891 1.00067 2.94833 1.39133 2.169 2.172C1.38967 2.954 1 3.89767 1 5.003C1 6.109 1.39067 7.05167 2.172 7.831C2.954 8.61033 3.89767 9 5.003 9Z" fill="#D55665"/></svg></span>' : ''}
                    </h3>
                    <div class="pet-card__details">
                      <p class="pet-card__detail-item">色：${pet.color}</p>
                      <p class="pet-card__detail-item">誕生日：${formatDate(pet.birthday)}</p>
                      <p class="pet-card__detail-item">店舗：${pet.storeName}</p>
                    </div>
                  </div>
                </div>
              </div>
            `;
            petsGrid.insertAdjacentHTML('beforeend', petCardHTML);
          });

          offset += 18;
          
          // 取得したデータが18未満の場合、VIEW MOREボタンを非表示
          if (newPets.length < 18) {
            viewMoreButton.style.display = 'none';
          }
        } else {
          // データがない場合はボタンを非表示
          viewMoreButton.style.display = 'none';
        }
      } catch (error) {
        console.error('Error loading more breed dogs:', error);
        // エラー時はボタンのテキストを変更
        viewMoreButton.querySelector('.view-more-text').textContent = 'エラーが発生しました';
        viewMoreButton.disabled = true;
      } finally {
        isLoading = false;
        viewMoreButton.classList.remove('loading');
        viewMoreButton.disabled = false;
      }
    });
  }
</script>

<style lang="scss">
  @import '../../../styles/variables';
  @import '../../../styles/mixins';

  .pets-section {
    @include section-padding;
    background-color: $color-background;
    min-height: calc(100vh - 400px);
  }

  .no-pets-message {
    text-align: center;
    padding: rem(60) rem(20);
    
    p {
      margin-bottom: rem(20);
      font-size: rem(18);
      color: $color-text;
      
      &:last-child {
        margin-bottom: 0;
      }
      
      a {
        color: $color-primary;
        text-decoration: none;
        
        &:hover {
          text-decoration: underline;
        }
      }
    }
  }
</style>