---
import Layout from '../../../../layouts/Layout.astro';
import PetCard from '../../../../components/pets/PetCard.astro';
import HeroSection from '../../../../components/sections/common/HeroSection.astro';
import BannerSection from '../../../../components/sections/common/BannerSection.astro';
import ContactCTASection from '../../../../components/sections/common/ContactCTASection.astro';
import ViewMoreButton from '../../../../components/ui/buttons/ViewMoreButton.astro';
import { getLatestPetsByType } from '../../../../lib/api/pets/queries';
import { getMixBreedsByAnimalType } from '../../../../lib/api/pets/navigation';
import { getBreedsByAnimalType } from '../../../../lib/api/pets';
import { getImageUrl } from '../../../../lib/utils/image';
import '../../../../styles/layout/pets-grid.scss';

export async function getStaticPaths() {
  try {
    // 直接ペットデータからミックス品種を抽出
    const allDogs = await getLatestPetsByType('dog');
    console.log('[getStaticPaths] 全犬データ数:', allDogs.length);
    
    // ミックス犬のみを抽出
    const mixDogs = allDogs.filter(pet => pet.classification === 'mix');
    console.log('[getStaticPaths] ミックス犬数:', mixDogs.length);
    
    // ユニークなbreedTypeEnを取得
    const uniqueBreedTypes = [...new Set(mixDogs.map(pet => pet.breedTypeEn))];
    console.log('[getStaticPaths] ユニークなミックス品種:', uniqueBreedTypes);
    
    // ハイフン形式のパスを生成
    const paths = uniqueBreedTypes.map((breedTypeEn) => {
      const urlPath = breedTypeEn.replace(/×/g, '-').toLowerCase();
      console.log('[getStaticPaths] 生成するパス:', breedTypeEn, '->', urlPath);
      return {
        params: { 
          breedTypeEn: urlPath 
        }
      };
    });
    
    console.log('[getStaticPaths] 生成されるパス数:', paths.length);
    return paths;
  } catch (error) {
    console.error('[getStaticPaths] ミックスエラー:', error);
    return [];
  }
}

const { breedTypeEn } = Astro.params;

// URLパラメータの - を × に戻し、大文字に変換
const actualBreedTypeEn = breedTypeEn?.replace(/-/g, '×').toUpperCase();

console.log('=== ミックス品種ページ開始 ===');
console.log('breedTypeEn:', breedTypeEn);
console.log('actualBreedTypeEn:', actualBreedTypeEn);

// この品種のミックス犬を取得（全フィールド）
const allDogs = await getLatestPetsByType('dog');
console.log(`[${breedTypeEn}] 全犬データ数:`, allDogs.length);
console.log(`[${breedTypeEn}] 探しているミックス品種:`, actualBreedTypeEn);

// データサンプルを確認
if (allDogs.length > 0) {
  console.log(`[${breedTypeEn}] 犬データサンプル:`, {
    breedTypeEn: allDogs[0].breedTypeEn,
    breedTypeJa: allDogs[0].breedTypeJa,
    classification: allDogs[0].classification
  });
  
  // 最初の数件の品種を確認
  const firstFewBreeds = allDogs.slice(0, 5).map(pet => ({
    breedTypeEn: pet.breedTypeEn,
    breedTypeJa: pet.breedTypeJa,
    classification: pet.classification
  }));
  console.log(`[${breedTypeEn}] 最初の5件の品種データ:`, firstFewBreeds);
  
  // ミックス品種一覧を確認
  const mixBreeds = [...new Set(allDogs
    .filter(pet => pet.classification === 'mix')
    .map(pet => pet.breedTypeEn)
  )];
  console.log(`[${breedTypeEn}] ミックス品種一覧:`, mixBreeds);
}

const breedDogs = allDogs.filter(pet => 
  pet.classification === 'mix' && 
  pet.breedTypeEn === actualBreedTypeEn
);

console.log(`[${breedTypeEn}] フィルタ後のミックス犬数:`, breedDogs.length);

// デバッグ情報を追加
const allMixDogs = allDogs.filter(pet => pet.classification === 'mix');
console.log('=== デバッグ情報 ===');
console.log('URLパラメータ breedTypeEn:', breedTypeEn);
console.log('変換後 actualBreedTypeEn:', actualBreedTypeEn);
console.log('全犬数:', allDogs.length);
console.log('ミックス犬数:', allMixDogs.length);
console.log('利用可能なミックス品種:', [...new Set(allMixDogs.map(p => p.breedTypeEn))]);

// もしフィルタ結果が0なら、部分一致も試してみる
if (breedDogs.length === 0) {
  const partialMatches = allDogs.filter(pet => 
    pet.classification === 'mix' && 
    pet.breedTypeEn?.includes(actualBreedTypeEn)
  );
  console.log(`[${breedTypeEn}] 部分一致結果:`, partialMatches.length);
  
  const exactClassificationOnly = allDogs.filter(pet => 
    pet.classification === 'mix'
  );
  console.log(`[${breedTypeEn}] ミックスのみ:`, exactClassificationOnly.length);
}

// 初期表示用（最初の24件）
const initialDogs = breedDogs.slice(0, 24);

// 品種名を取得（日本語）
// まずミックス品種データから日本語名を探す
const { pureBreeds, hasMix } = await getBreedsByAnimalType('dog');
const submenuItems = [{ type: 'dog', breeds: pureBreeds, hasMix: hasMix }];
const mixBreedsData = await getMixBreedsByAnimalType(submenuItems);
const dogMixBreeds = mixBreedsData.find(mb => mb.type === 'dog');
const breedData = dogMixBreeds?.breeds.find(breed => breed.url.split('/').pop() === breedTypeEn);
const breedTypeJa = breedData ? breedData.name : (initialDogs.length > 0 ? initialDogs[0].breedTypeJa : breedTypeEn);

// HeroSection用の画像（先頭の個体の画像）
const placeholderImage = '/images/ui/img_loading-pet-image-01.webp';
const heroImage = initialDogs.length > 0 
  ? (initialDogs[0].imageUrl01 ? getImageUrl(initialDogs[0].imageUrl01, 800, 600) : placeholderImage)
  : '/images/backgrounds/img_bg-hero_search-dogs-01.webp';

// パンくずリストのデータ
const breadcrumbItems = [
  { label: 'ホーム', href: '/' },
  { label: '子犬・子猫を探す', href: '/search' },
  { label: '子犬を探す', href: '/search/dogs' },
  { label: 'ミックス', href: '/search/dogs/mix' },
  { label: breedTypeJa }
];
---

<Layout title={`${breedTypeJa} | ミックス | 子犬を探す | Cattleya(カトレア)`}>
  <main>
    <HeroSection 
      title={breedTypeJa}
      image={heroImage}
      breadcrumbItems={breadcrumbItems}
      isPetImage={initialDogs.length > 0}
    />
    <section class="pets-section">
      <div class="container">
        {initialDogs.length > 0 ? (
          <>
            <div class="pets-count">
              <span class="pets-count__number">{breedDogs.length}</span><span class="pets-count__unit">件</span>
            </div>
            <div class="pets-grid" data-all-pets={JSON.stringify(breedDogs)}>
              {initialDogs.map((pet) => <PetCard pet={pet} />)}
            </div>
            {breedDogs.length > 24 && (
              <ViewMoreButton />
            )}
          </>
        ) : (
          <div class="no-pets-message">
            <p>現在、{breedTypeJa}の子犬はおりません。</p>
            <p><a href="/search/dogs/mix">他のミックス犬を見る</a></p>
          </div>
        )}
      </div>
    </section>
    
    <BannerSection />
    <ContactCTASection />
  </main>
</Layout>

<script>
  // VIEW MORE button functionality with static data
  document.addEventListener('DOMContentLoaded', function() {
    const viewMoreButton = document.getElementById('viewMoreButton');
    const petsGrid = document.querySelector('.pets-grid');
    
    if (!viewMoreButton || !petsGrid) return;
    
    // Get all pets data from the grid
    const allPetsData = JSON.parse(petsGrid.dataset.allPets || '[]');
    let currentlyShown = 24;
    const itemsPerPage = 18;
    
    viewMoreButton.addEventListener('click', function() {
      const button = this;
      
      // Show loading state
      button.classList.add('loading');
      button.disabled = true;
      
      // Simulate loading delay for better UX
      setTimeout(() => {
        // Calculate next batch
        const nextBatch = allPetsData.slice(currentlyShown, currentlyShown + itemsPerPage);
        
        // Create and append new pet cards
        nextBatch.forEach(pet => {
          const petCardHTML = `
            <div class="pet-card" data-animal-type="${pet.animalType}">
              <a href="/search/dogs/mix/${encodeURIComponent((pet.breedTypeEn || '').replace(/×/g, '-').toLowerCase())}/${pet.id}" class="pet-card__link">
                <div class="pet-card__inner">
                  <div class="pet-card__image-container">
                    <img
                      class="pet-card__image"
                      src="${pet.imageUrl01}"
                      alt="${pet.breedTypeJa}の写真"
                      loading="lazy"
                      width="600"
                      height="600"
                      onerror="this.src='/images/ui/img_loading-pet-image-01.webp'"
                    />
                  </div>
                  <div class="pet-card__info">
                    <h3 class="pet-card__title">
                      ${pet.breedTypeJa}
                      ${pet.gender === '男の子' ? '<img class="pet-card__gender male" src="/icons/icon_male.png" alt="男性" />' : ''}
                      ${pet.gender === '女の子' ? '<img class="pet-card__gender female" src="/icons/icon_female.png" alt="女性" />' : ''}
                    </h3>
                    <div class="pet-card__details">
                      <p class="pet-card__detail-item">カラー：${pet.color || ''}</p>
                      <p class="pet-card__detail-item">誕生日：${pet.birthday ? new Date(pet.birthday).toLocaleDateString('ja-JP', {year: 'numeric', month: 'numeric', day: 'numeric'}) : ''}</p>
                      <p class="pet-card__detail-item">店舗：${pet.storeName || ''}</p>
                    </div>
                  </div>
                </div>
              </a>
            </div>
          `;
          petsGrid.insertAdjacentHTML('beforeend', petCardHTML);
        });
        
        currentlyShown += itemsPerPage;
        
        // Hide button if no more items
        if (currentlyShown >= allPetsData.length) {
          button.style.display = 'none';
        }
        
        // Remove loading state
        button.classList.remove('loading');
        button.disabled = false;
      }, 500);
    });
  });
</script>


<style lang="scss">
  @import '../../../../styles/variables';
  @import '../../../../styles/mixins';

  .pets-section {
    @include section-padding;
    background-color: $color-background;
    min-height: calc(100vh - 400px);
  }

  .no-pets-message {
    text-align: center;
    padding: rem(60) rem(20);
    
    p {
      margin-bottom: rem(20);
      font-size: rem(18);
      color: $color-text;
      
      &:last-child {
        margin-bottom: 0;
      }
      
      a {
        color: $color-primary;
        text-decoration: none;
        
        &:hover {
          text-decoration: underline;
        }
      }
    }
  }
</style>
