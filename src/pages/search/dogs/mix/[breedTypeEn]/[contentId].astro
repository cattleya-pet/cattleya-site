---
import Layout from '../../../../../layouts/Layout.astro';
import LineInquiryModal from '../../../../../components/LineInquiryModal.astro';
import { getLatestPetsByType } from '../../../../../lib/api/pets/queries';
import { getBreedsByAnimalType } from '../../../../../lib/api/pets';
import { getStoreById } from '../../../../../lib/api/stores';
import { getVoices } from '../../../../../lib/api/voice';
import { getImageUrl } from '../../../../../lib/utils/image';
import { formatDate } from '../../../../../lib/utils/date';
import BaseButton from '../../../../../components/ui/buttons/BaseButton.astro';
import ButtonWrapper from '../../../../../components/ui/buttons/ButtonWrapper.astro';
import VoiceCard from '../../../../../components/voice/VoiceCard.astro';
import BannerSection from '../../../../../components/sections/common/BannerSection.astro';
import ContactCTASection from '../../../../../components/sections/common/ContactCTASection.astro';
import Breadcrumb from '../../../../../components/ui/Breadcrumb.astro';
import '../../../../../styles/layout/pets-grid.scss';
import '../../../../../components/pets/PetCard.scss';
import '../../../../../styles/pages/pet-detail.scss';

export async function getStaticPaths() {
  try {
    const allDogs = await getLatestPetsByType('dog');
    console.log('[getStaticPaths] 全犬データ数:', allDogs.length);
    console.log('[getStaticPaths] 最初の5匹の犬の分類:', allDogs.slice(0, 5).map(p => ({ id: p.id, classification: p.classification, breedTypeJa: p.breedTypeJa })));
    
    const mixDogs = allDogs.filter(pet => pet.classification === 'mix');
    console.log('[getStaticPaths] ミックス犬の数:', mixDogs.length);
    
    if (mixDogs.length === 0) {
      console.log('[getStaticPaths] ミックス犬が存在しません');
      // ミックス犬がない場合でも全ての犬で詳細ページを作成
      const allValidDogs = allDogs.filter(pet => pet.breedTypeEn && pet.id);
      console.log('[getStaticPaths] 全犬で詳細ページを作成:', allValidDogs.length);
      
      const paths = allValidDogs.map((pet) => ({
        params: { 
          breedTypeEn: pet.breedTypeEn.toLowerCase(),
          contentId: pet.id
        }
      }));
      
      return paths;
    }
    
    const paths = mixDogs
      .filter(pet => pet.breedTypeEn && pet.id) // breedTypeEnとidが存在するものだけ
      .map((pet) => ({
        params: { 
          breedTypeEn: pet.breedTypeEn.toLowerCase(),
          contentId: pet.id
        }
      }));
    
    console.log('[getStaticPaths] 生成されるミックス犬詳細ページ数:', paths.length);
    console.log('[getStaticPaths] 最初の5つのパス:', paths.slice(0, 5));
    
    // デバッグ用：フィルタリングされたペットの詳細を表示
    console.log('[getStaticPaths] フィルタリング後のペット数:', mixDogs.length);
    console.log('[getStaticPaths] 最初の5匹のペット:', mixDogs.slice(0, 5).map(p => ({ id: p.id, breedTypeEn: p.breedTypeEn, breedTypeJa: p.breedTypeJa })));
    
    return paths;
  } catch (error) {
    console.error('[getStaticPaths] ミックス犬詳細ページエラー:', error);
    return [];
  }
}

const { breedTypeEn, contentId } = Astro.params;

console.log('=== ミックス犬詳細ページ開始 ===');
console.log('breedTypeEn:', breedTypeEn);
console.log('contentId:', contentId);

// ペット詳細データを取得
const allDogs = await getLatestPetsByType('dog');
console.log('[ペット詳細] 全犬データ数:', allDogs.length);
const pet = allDogs.find(p => p.id === contentId && p.breedTypeEn?.toLowerCase() === breedTypeEn?.toLowerCase());

if (!pet) {
  console.error(`Pet not found: ${contentId}, breedTypeEn: ${breedTypeEn}`);
  console.log('Available ids:', allDogs.map(p => p.id).slice(0, 10));
  console.log('Available breedTypeEns:', [...new Set(allDogs.map(p => p.breedTypeEn))]);
  return new Response('Pet not found', { status: 404 });
}

console.log('見つかったペット:', pet.breedTypeJa, pet.id);

// 品種名を取得（日本語）
const { pureBreeds } = await getBreedsByAnimalType('dog');
const breedData = pureBreeds.find(breed => breed.url.split('/').pop() === breedTypeEn);
const breedTypeJa = breedData ? breedData.name : pet.breedTypeJa;

// 店舗情報を取得（IDで取得、失敗した場合は名前で検索）
let storeInfo = await getStoreById(pet.storeId);

// IDで取得できない場合は、全店舗から名前で検索
if (!storeInfo) {
  const { getAllStores } = await import('../../../../../lib/api/stores');
  const allStores = await getAllStores();
  storeInfo = allStores.find(store => store.storeName === pet.storeName);
}

console.log('=== 店舗情報デバッグ ===');
console.log('pet.storeId:', pet.storeId);
console.log('pet.storeName:', pet.storeName);
console.log('取得した店舗情報:', storeInfo);
console.log('storeLine:', storeInfo?.storeLine);

// 画像・動画URLを準備
const mediaItems = [];
const placeholderImage = '/images/ui/img_loading-pet-image-01.webp';

// 4つのスロットを固定で用意
const mediaSlots = [
  { url: pet.imageUrl01, type: 'image', label: '写真1' },
  { url: pet.imageUrl02, type: 'image', label: '写真2' },
  { url: pet.imageUrl03, type: 'image', label: '写真3' },
  { url: pet.videoUrl, type: 'video', label: '動画' }
];

mediaSlots.forEach((slot, index) => {
  if (slot.url) {
    if (slot.type === 'image') {
      mediaItems.push({
        type: 'image',
        url: getImageUrl(slot.url, 800, 600),
        thumbnail: getImageUrl(slot.url, 150, 150),
        alt: `${pet.breedTypeJa}の${slot.label}`
      });
    } else if (slot.type === 'video') {
      // microCMSの動画URLをそのまま使用
      const videoThumbnail = getImageUrl(slot.url, 150, 150);
      
      mediaItems.push({
        type: 'video',
        url: slot.url,
        thumbnail: videoThumbnail,
        alt: `${pet.breedTypeJa}の${slot.label}`
      });
    }
  } else {
    // 空のスロットにはプレースホルダー画像を使用
    mediaItems.push({
      type: 'image', // プレースホルダーは常に画像として扱う
      url: placeholderImage,
      thumbnail: placeholderImage,
      alt: `${pet.breedTypeJa}のプレースホルダー画像${index + 1}`,
      isPlaceholder: true,
      isVideoPlaceholder: slot.type === 'video' // 動画プレースホルダーフラグ
    });
  }
});

console.log('メディア項目数:', mediaItems.length);

// オススメペットを取得する関数
function getRecommendedPets(currentPet: any, allPets: any[], count: number = 3) {
  // 自分自身を除外
  const otherPets = allPets.filter(p => p.id !== currentPet.id);
  
  // スコアリング関数
  const scoreCalculator = (pet: any) => {
    let score = 0;
    
    // 1. 共通のタグ（最高優先度）
    if (currentPet.tags && pet.tags) {
      // タグが配列でない場合は配列に変換
      const currentTags = Array.isArray(currentPet.tags) ? currentPet.tags : [currentPet.tags];
      const petTags = Array.isArray(pet.tags) ? pet.tags : [pet.tags];
      const commonTags = currentTags.filter((tag: string) => petTags.includes(tag));
      score += commonTags.length * 100; // タグ一致は高得点
    }
    
    // 2. 誕生日の近さ（中優先度）
    if (currentPet.birthday && pet.birthday) {
      const currentDate = new Date(currentPet.birthday);
      const petDate = new Date(pet.birthday);
      const daysDiff = Math.abs((currentDate.getTime() - petDate.getTime()) / (1000 * 3600 * 24));
      
      if (daysDiff <= 30) {
        score += 50; // 30日以内は高得点
      } else if (daysDiff <= 90) {
        score += 25; // 90日以内は中得点
      } else if (daysDiff <= 180) {
        score += 10; // 180日以内は低得点
      }
    }
    
    // 3. 同じ性別（低優先度）
    if (currentPet.gender === pet.gender) {
      score += 15;
    }
    
    return score;
  };
  
  // スコア付きでソートして上位を取得
  return otherPets
    .map(pet => ({ ...pet, score: scoreCalculator(pet) }))
    .sort((a, b) => b.score - a.score)
    .slice(0, count);
}

// 現在のペットと同じ動物種のペットをすべて取得
const allSameTypePets = await getLatestPetsByType(pet.animalType);
const allRecommendedPets = getRecommendedPets(pet, allSameTypePets, 3);

// レスポンシブ表示用に分割（lg未満は2匹、lg以降は3匹）
const recommendedPetsMobile = allRecommendedPets.slice(0, 2);
const recommendedPetsDesktop = allRecommendedPets;

console.log('オススメペット:', allRecommendedPets.map(p => ({ id: p.id, score: p.score, breedTypeJa: p.breedTypeJa })));

// お客様の声データを取得
const allVoices = await getVoices(10); // 多めに取得しておく
const displayVoices = allVoices.slice(0, 2); // sm以降で最大2件表示

console.log('お客様の声データ:', displayVoices.length, '件取得');

// パンくずリストのデータ
const breadcrumbItems = [
  { label: 'ホーム', href: '/' },
  { label: '子犬・子猫を探す', href: '/search' },
  { label: '子犬を探す', href: '/search/dogs' },
];

// ミックス犬の場合はミックスリンクを追加
if (pet.classification === 'mix') {
  breadcrumbItems.push(
    { label: 'ミックス', href: '/search/dogs/mix' },
    { label: breedTypeJa, href: `/search/dogs/mix/${breedTypeEn}` }
  );
} else {
  breadcrumbItems.push(
    { label: breedTypeJa, href: `/search/dogs/${breedTypeEn}` }
  );
}

// 最後に個体情報を追加
breadcrumbItems.push({ label: `ペット詳細（${pet.id.replace(/^0+/, '') || pet.id}）` });
---

<Layout 
  title={`${pet.breedTypeJa}（${pet.gender}）｜Cattleya ${pet.storeName}｜子犬詳細`}
  description={`No.${pet.id.replace(/^0+/, '') || pet.id}、誕生日：${formatDate(pet.birthday)}、カラー：${pet.color}。`}
  ogImage={pet.imageUrl01 ? getImageUrl(pet.imageUrl01, 1200, 630) : '/og-image.png'}
>
  <main>
    <!-- パンくずリスト -->
    <div class="breadcrumb-container">
      <div class="container">
        <Breadcrumb items={breadcrumbItems} />
      </div>
    </div>
    
    <section class="pet-detail">
      <div class="container">
        <div class="pet-detail__content">
          <!-- ペット名と性別 -->
          <div class="pet-detail__header">
            <h1 class="pet-detail__title">
              {breedTypeJa}
            </h1>
          </div>

          <div class="pet-detail__body">
            <!-- カルーセル -->
            <div class="pet-detail__carousel">
              <div class="carousel">
                <div class="carousel__main">
                  <button class="carousel__nav carousel__nav--prev" id="prevBtn">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" width="24" height="24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                    </svg>
                  </button>
                  
                  <div class="carousel__container" id="carousel-container">
                    {mediaItems.map((item, index) => (
                      <div 
                        class={`carousel__slide ${index === 0 ? 'carousel__slide--active' : ''}`}
                        data-index={index}
                      >
                        {item.type === 'image' && !item.isVideoPlaceholder ? (
                          <img 
                            src={item.url}
                            alt={item.alt}
                            class="carousel__image"
                            loading={index === 0 ? 'eager' : 'lazy'}
                          />
                        ) : item.type === 'image' && item.isVideoPlaceholder ? (
                          <!-- 動画プレースホルダー（no-image + メッセージ） -->
                          <div class="carousel__video-container carousel__video-container--placeholder">
                            <img 
                              src={item.url}
                              alt={item.alt}
                              class="carousel__image"
                              loading={index === 0 ? 'eager' : 'lazy'}
                            />
                            <div class="carousel__video-message">
                              <svg viewBox="0 0 24 24" fill="currentColor" width="32" height="32" class="video-message-icon">
                                <path d="M17,10.5V7A1,1 0 0,0 16,6H4A1,1 0 0,0 3,7V17A1,1 0 0,0 4,18H16A1,1 0 0,0 17,17V13.5L21,17.5V6.5L17,10.5Z"/>
                              </svg>
                              <p class="video-message-text">動画が設定されて<br>いません</p>
                            </div>
                          </div>
                        ) : (
                          <!-- 実際の動画 -->
                          <div class="carousel__video-container">
                            <video
                              class="carousel__video"
                              data-video-src={item.url}
                              preload="metadata"
                              muted
                              playsInline
                            ></video>
                            <div class="carousel__video-play-btn">
                              <svg viewBox="0 0 24 24" fill="currentColor" width="48" height="48">
                                <path d="M8,5.14V19.14L19,12.14L8,5.14Z"/>
                              </svg>
                            </div>
                          </div>
                        )}
                      </div>
                    ))}
                  </div>

                  <button class="carousel__nav carousel__nav--next" id="nextBtn">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" width="24" height="24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                    </svg>
                  </button>
                </div>

                <!-- サムネイル -->
                <div class="carousel__thumbnails">
                  {mediaItems.map((item, index) => (
                    <button 
                      class={`carousel__thumbnail ${index === 0 ? 'carousel__thumbnail--active' : ''}`}
                      data-index={index}
                    >
                      {item.type === 'image' && !item.isVideoPlaceholder ? (
                        <img 
                          src={item.thumbnail}
                          alt={item.alt}
                          class="carousel__thumbnail-image"
                        />
                      ) : item.type === 'image' && item.isVideoPlaceholder ? (
                        <!-- 動画プレースホルダー（no-image + メッセージ） -->
                        <div class="carousel__thumbnail-video carousel__thumbnail-video--placeholder">
                          <img 
                            src={item.thumbnail}
                            alt={item.alt}
                            class="carousel__thumbnail-image"
                          />
                          <div class="carousel__thumbnail-message">
                            <svg viewBox="0 0 24 24" fill="currentColor" width="16" height="16" class="thumbnail-message-icon">
                              <path d="M17,10.5V7A1,1 0 0,0 16,6H4A1,1 0 0,0 3,7V17A1,1 0 0,0 4,18H16A1,1 0 0,0 17,17V13.5L21,17.5V6.5L17,10.5Z"/>
                            </svg>
                            <span class="thumbnail-message-text">動画なし</span>
                          </div>
                        </div>
                      ) : (
                        <!-- 実際の動画サムネイル -->
                        <div class="carousel__thumbnail-video">
                          <video
                            class="carousel__thumbnail-video-element"
                            data-video-src={item.url}
                            preload="metadata"
                            muted
                            playsInline
                          ></video>
                          <div class="carousel__thumbnail-play-icon">
                            <svg viewBox="0 0 24 24" fill="currentColor" width="24" height="24">
                              <path d="M8,5.14V19.14L19,12.14L8,5.14Z"/>
                            </svg>
                          </div>
                        </div>
                      )}
                    </button>
                  ))}
                </div>
              </div>
            </div>

            <!-- サイドバー（ペット情報 + アクション） -->
            <div class="pet-detail__sidebar">
              <!-- タイトル（lg以上で表示） -->
              <div class="pet-detail__sidebar-title">
                <h1 class="pet-detail__title">
                  {breedTypeJa}
                </h1>
              </div>

              <!-- ペット情報 -->
              <div class="pet-detail__info">
                <div class="pet-info">
                  <div class="pet-info__item">
                    <dt class="pet-info__label">性別</dt>
                    <dd class="pet-info__value">{pet.gender}</dd>
                  </div>
                  <div class="pet-info__item">
                    <dt class="pet-info__label">カラー</dt>
                    <dd class="pet-info__value">{pet.color}</dd>
                  </div>
                  <div class="pet-info__item">
                    <dt class="pet-info__label">誕生日</dt>
                    <dd class="pet-info__value">{formatDate(pet.birthday)}</dd>
                  </div>
                  {(pet.mixFatherBreed || pet.mixMotherBreed) && (
                    <div class="pet-info__item">
                      <dt class="pet-info__label">両親情報</dt>
                      <dd class="pet-info__value pet-info__value--parents">
                        {pet.mixFatherBreed && <span class="parent-info">父：{pet.mixFatherBreed}</span>}
                        {pet.mixMotherBreed && <span class="parent-info">母：{pet.mixMotherBreed}</span>}
                      </dd>
                    </div>
                  )}
                  {(pet.fatherWeight || pet.motherWeight) && (
                    <div class="pet-info__item">
                      <dt class="pet-info__label">両親体重</dt>
                      <dd class="pet-info__value pet-info__value--parents">
                        {pet.fatherWeight && <span class="parent-info">父：{pet.fatherWeight}kg</span>}
                        {pet.motherWeight && <span class="parent-info">母：{pet.motherWeight}kg</span>}
                      </dd>
                    </div>
                  )}
                  <div class="pet-info__item">
                    <dt class="pet-info__label">お問い合わせ番号</dt>
                    <dd class="pet-info__value">{pet.id.replace(/^0+/, '') || pet.id}</dd>
                  </div>
                  <div class="pet-info__item">
                    <dt class="pet-info__label">店舗</dt>
                    <dd class="pet-info__value">
                      <a href={`/stores/${pet.storeId}`} class="store-tag">
                        #{pet.storeName}
                      </a>
                    </dd>
                  </div>
                </div>
              </div>

              <!-- アクションボタン -->
              <div class="pet-detail__actions">
                <div class="action-buttons">
                  <button 
                    type="button"
                    class="action-button action-button--link"
                    onclick="openLineInquiryModal()"
                  >
                    <div class="action-button__icon">
                      <img src="/icons/icon_line-01.svg" alt="LINEアイコン" width="32" height="32" />
                    </div>
                    <div class="action-button__text">
                      この子をLINEで<br>問い合わせる
                    </div>
                  </button>

                  <a 
                    href={`/contact?pet=${pet.id}#inquiry-number-label`}
                    class="action-button action-button--mail"
                  >
                    <div class="action-button__icon">
                      <img src="/icons/icon_store-mail-01.svg" alt="メールアイコン" width="32" height="32" />
                    </div>
                    <div class="action-button__text">
                      この子をメールで<br>問い合わせる
                    </div>
                  </a>

                  <button class="action-button action-button--phone">
                    <div class="action-button__icon">
                      <img src="/icons/icon_store-phone-01.svg" alt="電話アイコン" width="32" height="32" />
                    </div>
                    <div class="action-button__text">
                      この子を電話で<br>問い合わせる
                    </div>
                  </button>
                </div>
              </div>

              <!-- シェアボタン -->
              <div class="pet-detail__share">
                <div class="share-header">
                  ＼この子をみんなにシェアする／
                </div>
                <div class="share-buttons">
                  <button class="share-button share-button--twitter">
                    <svg viewBox="0 0 24 24" fill="currentColor" width="20" height="20">
                      <path d="M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z"/>
                    </svg>
                  </button>
                  <button class="share-button share-button--line">
                    <svg viewBox="0 0 24 24" fill="currentColor" width="20" height="20">
                      <path d="M19.365 9.863c.349 0 .63.285.63.631 0 .345-.281.63-.63.63H17.61v1.125h1.755c.349 0 .63.283.63.63 0 .344-.281.629-.63.629h-2.386c-.345 0-.627-.285-.627-.629V8.108c0-.345.282-.63.63-.63h2.386c.346 0 .627.285.627.63 0 .349-.281.63-.63.63H17.61v1.125h1.755zm-3.855 3.016c0 .27-.174.51-.432.596-.064.021-.133.031-.199.031-.211 0-.391-.09-.51-.25l-2.443-3.317v2.94c0 .344-.279.629-.631.629-.346 0-.626-.285-.626-.629V8.108c0-.27.173-.51.43-.595.06-.023.136-.033.194-.033.195 0 .375.104.495.254l2.462 3.33V8.108c0-.345.282-.63.63-.63.345 0 .63.285.63.63v4.771zm-5.741 0c0 .344-.282.629-.631.629-.345 0-.627-.285-.627-.629V8.108c0-.345.282-.63.63-.63.346 0 .628.285.628.63v4.771zm-2.466.629H4.917c-.345 0-.63-.285-.63-.629V8.108c0-.345.285-.63.63-.63.348 0 .63.285.63.63v4.141h1.756c.348 0 .629.283.629.63 0 .344-.282.629-.629.629M24 10.314C24 4.943 18.615.572 12 .572S0 4.943 0 10.314c0 4.811 4.27 8.842 10.035 9.608.391.082.923.258 1.058.59.12.301.079.766.038 1.08l-.164 1.02c-.045.301-.24 1.186 1.049.645 1.291-.539 6.916-4.078 9.436-6.975C23.176 14.393 24 12.458 24 10.314"/>
                    </svg>
                  </button>
                  <button class="share-button share-button--link">
                    <img src="/icons/icon_chain-01.svg" alt="リンクコピー" width="20" height="20" />
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- 関連コンテンツセクション -->
    <section class="related-content-section">
      <div class="container">
        <!-- この子に会いたいボックス -->
        <div class="content-box">
          <h2 class="content-box__title">この子に会いたい</h2>
          <div class="content-box__buttons">
            <a href="/flow" class="bg-button bg-button--flow">
              <div class="bg-button__overlay">
                <span class="bg-button__text">お迎えまでの流れ</span>
              </div>
            </a>
            <a href="/reserve" class="bg-button bg-button--reserve">
              <div class="bg-button__overlay">
                <span class="bg-button__text">来店予約をする</span>
              </div>
            </a>
          </div>
        </div>

        <!-- あなたへのオススメセクション -->
        <div class="content-box">
          <h2 class="content-box__title">あなたへのオススメ</h2>
          <div class="pets-grid">
            {allRecommendedPets.map((recommendedPet, index) => (
              <div class={`pet-card ${index >= 2 ? 'pet-card--lg-only' : ''}`} data-animal-type={recommendedPet.animalType}>
                <a href={`/search/${pet.animalType === 'dog' ? 'dogs' : 'cats'}/${recommendedPet.classification === 'mix' ? 'mix/' : ''}${encodeURIComponent((recommendedPet.breedTypeEn || '').toLowerCase())}/${recommendedPet.id}`} class="pet-card__link">
                  <div class="pet-card__inner">
                    <div class="pet-card__image-container">
                      <img
                        class="pet-card__image"
                        src={getImageUrl(recommendedPet.imageUrl01, 600, 600)}
                        alt={`${recommendedPet.breedTypeJa}の写真`}
                        loading="lazy"
                        width="600"
                        height="600"
                        onerror="this.src='/images/ui/img_loading-pet-image-01.webp'"
                      />
                    </div>
                    <div class="pet-card__info">
                      <h3 class="pet-card__title">
                        {recommendedPet.breedTypeJa}
                        {recommendedPet.gender === '男の子' && (
                          <img class="pet-card__gender male" src="/icons/icon_male.png" alt="男の子" />
                        )}
                        {recommendedPet.gender === '女の子' && (
                          <img class="pet-card__gender female" src="/icons/icon_female.png" alt="女の子" />
                        )}
                      </h3>
                      <div class="pet-card__details">
                        <p class="pet-card__detail-item">カラー：{recommendedPet.color}</p>
                        <p class="pet-card__detail-item">誕生日：{formatDate(recommendedPet.birthday)}</p>
                        <p class="pet-card__detail-item">店舗：{recommendedPet.storeName}</p>
                      </div>
                    </div>
                  </div>
                </a>
              </div>
            ))}
          </div>
        </div>

        <!-- ホームステイセクション -->
        <div class="content-box homestay-content-box">
          <h2 class="content-box__title">ホームステイ</h2>
          <div class="homestay-section-inner">
            <div class="homestay-img-wrap">
              <img src="/images/content/img_homestay_main-01.webp" alt="ホームステイ" class="homestay-img" loading="lazy" />
            </div>
            
            <div class="homestay-content">
              <div class="homestay-features">
                <p class="homestay-feature">一律10,000円(税込)で選べる泊数</p>
                <p class="homestay-feature">お泊まりセット無料でレンタル</p>
              </div>
              <p class="homestay-desc">カトレアでは、お客様とワンちゃん・ネコちゃんの相性や飼育不安を取り除くために、ホームステイサービスを行なっています。<br><br>ホームステイ中もスタッフが精一杯サポートいたします。<br>お気軽にお申し付けください。</p>
              <ButtonWrapper>
                <BaseButton href="/homestay" text="詳しくみる" variant="short" />
              </ButtonWrapper>
            </div>
          </div>
        </div>

        <!-- お客様の声セクション -->
        <div class="content-box voice-content-box">
          <h2 class="content-box__title">お客様の声</h2>
          <div class="voice-grid">
            {displayVoices.map((voice, index) => (
              <div class={`voice-card-wrapper ${index >= 1 ? 'voice-card--sm-only' : ''}`}>
                <VoiceCard
                  petName={voice.petName}
                  petGender={voice.petGender}
                  petThumbnail={voice.petThumbnail}
                  ownerName={voice.ownerName}
                  animalType={voice.animalType}
                  store={voice.store}
                  voiceContent={voice.voiceContent}
                  class="voice-card--compact"
                />
              </div>
            ))}
          </div>
          <ButtonWrapper>
            <BaseButton href="/voice" text="もっとみる" variant="short" />
          </ButtonWrapper>
        </div>

        <!-- カトレアの安心セクション -->
        <div class="content-box relief-content-box">
          <h2 class="content-box__title">カトレアの安心</h2>
          <div class="relief-section-inner">
            <div class="relief-img-wrap">
              <img src="/images/content/img_relief-main-01.webp" alt="カトレアの安心" class="relief-img" loading="lazy" />
            </div>
            
            <div class="relief-content">
              <p class="relief-desc">カトレアでは、専門獣医師による徹底した健康管理や、万が一の事態に備えた保証、そしてお迎え後も続くサポートを通じて、ペットとお客様が安心して過ごせる環境を提供しています。<br>健康状態の詳細な情報提供や、清潔な環境での飼育も心がけています。<br><br>ペットと家族が一生涯安心して一緒に過ごせるよう、全てのプロセスでサポートを続けています。</p>
              <ButtonWrapper>
                <BaseButton href="/relief" text="詳しくみる" variant="short" />
              </ButtonWrapper>
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- バナーセクション -->
    <BannerSection />

    <!-- お問い合わせCTAセクション -->
    <ContactCTASection />

    <!-- モーダル -->
    <div id="media-modal" class="media-modal">
      <div class="media-modal__overlay"></div>
      <div class="media-modal__content">
        <button class="media-modal__close" id="modal-close">
          <svg viewBox="0 0 24 24" fill="currentColor" width="24" height="24">
            <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/>
          </svg>
        </button>
        
        <!-- ナビゲーションボタン -->
        <button class="media-modal__nav media-modal__nav--prev" id="modal-prev">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" width="24" height="24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
          </svg>
        </button>
        
        <button class="media-modal__nav media-modal__nav--next" id="modal-next">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" width="24" height="24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
          </svg>
        </button>
        
        <div class="media-modal__media" id="modal-media">
          <!-- メディア内容がJavaScriptで動的に挿入される -->
        </div>
      </div>
    </div>
  </main>

  <!-- LINEお問い合わせモーダル -->
  <LineInquiryModal petId={pet.id} storeLine={storeInfo?.storeLine} />
</Layout>

<script define:vars={{ mediaItemsCount: mediaItems.length, mediaItems }}>
  document.addEventListener('DOMContentLoaded', function() {
    console.log('🚀 Pet detail page initialized with HTML5 video support');
    
    let currentSlide = 0;
    let currentModalSlide = 0; // モーダル用の現在のスライドインデックス
    
    // モーダル関連
    const modal = document.getElementById('media-modal');
    const modalMedia = document.getElementById('modal-media');
    const modalClose = document.getElementById('modal-close');
    const modalOverlay = modal ? modal.querySelector('.media-modal__overlay') : null;
    const modalPrev = document.getElementById('modal-prev');
    const modalNext = document.getElementById('modal-next');
    
    // カルーセル関連
    const slides = document.querySelectorAll('.carousel__slide');
    const thumbnails = document.querySelectorAll('.carousel__thumbnail');
    const prevBtn = document.getElementById('prevBtn');
    const nextBtn = document.getElementById('nextBtn');
    
    console.log(`🎯 Found ${slides.length} slides, ${thumbnails.length} thumbnails`);

    function openModal(mediaItem, slideIndex = currentSlide) {
      console.log('🎬 Opening modal with HTML5 video:', mediaItem);
      
      // 現在のモーダルスライドを設定
      currentModalSlide = slideIndex;
      updateModalNavButtons();
      
      // メディア内容をクリア
      modalMedia.innerHTML = '';
      
      if (mediaItem.type === 'image' && !mediaItem.isVideoPlaceholder) {
        const img = document.createElement('img');
        img.src = mediaItem.url;
        img.alt = mediaItem.alt;
        img.className = 'media-modal__image';
        modalMedia.appendChild(img);
        console.log('🖼️ Image added to modal');
      } else if (mediaItem.type === 'image' && mediaItem.isVideoPlaceholder) {
        // 動画プレースホルダーの場合はメッセージを表示
        const messageContainer = document.createElement('div');
        messageContainer.className = 'media-modal__video-message';
        messageContainer.innerHTML = `
          <div class="modal-video-message">
            <svg viewBox="0 0 24 24" fill="currentColor" width="48" height="48" class="modal-message-icon">
              <path d="M17,10.5V7A1,1 0 0,0 16,6H4A1,1 0 0,0 3,7V17A1,1 0 0,0 4,18H16A1,1 0 0,0 17,17V13.5L21,17.5V6.5L17,10.5Z"/>
            </svg>
            <p class="modal-message-text">動画が設定されていません</p>
          </div>
        `;
        modalMedia.appendChild(messageContainer);
        console.log('📹 Video placeholder message added to modal');
      } else if (mediaItem.type === 'video') {
        // HTML5 video要素を作成
        const video = document.createElement('video');
        
        let videoUrl = mediaItem.url;
        
        video.src = videoUrl;
        video.controls = true;
        video.autoplay = true;
        video.muted = false;
        video.preload = 'metadata';
        video.playsInline = true;
        
        // 動画のアスペクト比を検出してCSSクラスを適用
        const urlLower = mediaItem.url.toLowerCase();
        let videoClass = 'media-modal__video';
        
        if (urlLower.includes('vertical') || 
            urlLower.includes('portrait') || 
            urlLower.includes('9-16') ||
            urlLower.includes('916') ||
            urlLower.includes('tiktok') ||
            urlLower.includes('story')) {
          videoClass += ' vertical-video';
          console.log('🎬 Applied vertical-video class');
        } else if (urlLower.includes('square') || 
                   urlLower.includes('1-1') ||
                   urlLower.includes('11') ||
                   urlLower.includes('instagram')) {
          videoClass += ' square-video';
          console.log('🎬 Applied square-video class');
        } else {
          console.log('🎬 Applied default horizontal video class');
        }
        
        video.className = videoClass;
        
        // 動画メタデータ読み込み後のイベントハンドラー
        video.addEventListener('loadedmetadata', () => {
          console.log('🎬 Video metadata loaded:', {
            videoWidth: video.videoWidth,
            videoHeight: video.videoHeight,
            duration: video.duration,
            aspectRatio: video.videoWidth / video.videoHeight
          });
          
          // 実際のアスペクト比に基づいてクラスを再調整
          const actualAspectRatio = video.videoWidth / video.videoHeight;
          video.classList.remove('vertical-video', 'square-video');
          
          if (actualAspectRatio < 1) {
            video.classList.add('vertical-video');
            console.log('🎬 Updated to vertical-video based on actual dimensions');
          } else if (Math.abs(actualAspectRatio - 1) < 0.1) {
            video.classList.add('square-video');
            console.log('🎬 Updated to square-video based on actual dimensions');
          } else {
            console.log('🎬 Using default horizontal layout based on actual dimensions');
          }
        });
        
        // エラーハンドリング
        video.addEventListener('error', (e) => {
          console.error('🎬 Video playback error:', e);
        });
        
        modalMedia.appendChild(video);
        console.log('🎬 HTML5 video added to modal');
      }
      
      modal.classList.add('media-modal--active');
      document.body.style.overflow = 'hidden';
      console.log('✅ Modal opened with HTML5 video support');
    }

    function closeModal() {
      modal.classList.remove('media-modal--active');
      document.body.style.overflow = '';
      modalMedia.innerHTML = '';
      console.log('❌ Modal closed');
    }

    function updateModalNavButtons() {
      // 循環ナビゲーションのため常に有効にする
      if (modalPrev) {
        modalPrev.disabled = false;
      }
      if (modalNext) {
        modalNext.disabled = false;
      }
    }

    function showModalSlide(index) {
      // 循環処理を追加
      const normalizedIndex = (index + mediaItemsCount) % mediaItemsCount;
      
      const mediaItem = mediaItems[normalizedIndex];
      if (mediaItem) {
        openModal(mediaItem, normalizedIndex);
        
        // メインカルーセルも同期して更新
        showSlide(normalizedIndex);
      }
    }

    function nextModalSlide() {
      showModalSlide(currentModalSlide + 1);
    }

    function prevModalSlide() {
      showModalSlide(currentModalSlide - 1);
    }

    function showSlide(index) {
      slides.forEach((slide, i) => {
        slide.classList.toggle('carousel__slide--active', i === index);
        
        // HTML5 video要素の制御
        const video = slide.querySelector('.carousel__video');
        const playBtn = slide.querySelector('.carousel__video-play-btn');
        
        if (video && video.dataset.videoSrc) {
          if (i === index) {
            // アクティブなスライドでは動画URLを設定、再生ボタンを表示
            const videoUrl = video.dataset.videoSrc;
            console.log('🎬 Loading main carousel video with URL:', videoUrl);
            video.src = videoUrl;
            
            // メタデータ読み込み後に最初のフレームを表示
            video.addEventListener('loadedmetadata', () => {
              console.log('🎬 Main carousel video metadata loaded');
              video.currentTime = 0.5; // 0.5秒地点のフレームを表示
            });
            
            video.addEventListener('seeked', () => {
              console.log('🎬 Main carousel video seeked to first frame');
              video.pause(); // 最初のフレームで一時停止
            });
            
            if (playBtn) playBtn.style.display = 'flex';
          } else {
            // 非アクティブなスライドの動画をリセット
            video.src = '';
            video.pause();
            if (playBtn) playBtn.style.display = 'flex';
          }
        }
      });

      // サムネイルを切り替え
      thumbnails.forEach((thumb, i) => {
        thumb.classList.toggle('carousel__thumbnail--active', i === index);
      });

      currentSlide = index;
    }

    function nextSlide() {
      const next = (currentSlide + 1) % mediaItemsCount;
      showSlide(next);
    }

    function prevSlide() {
      const prev = (currentSlide - 1 + mediaItemsCount) % mediaItemsCount;
      showSlide(prev);
    }

    // イベントリスナー
    if (prevBtn) prevBtn.addEventListener('click', prevSlide);
    if (nextBtn) nextBtn.addEventListener('click', nextSlide);

    // サムネイルクリック
    thumbnails.forEach((thumb, index) => {
      thumb.addEventListener('click', () => showSlide(index));
    });

    // タッチスワイプ機能（メインカルーセル）
    let touchStartX = 0;
    let touchEndX = 0;
    const minSwipeDistance = 50;

    function handleMainCarouselSwipe() {
      const swipeDistance = touchEndX - touchStartX;
      if (Math.abs(swipeDistance) > minSwipeDistance) {
        if (swipeDistance > 0) {
          // 右スワイプ（前のスライド）
          prevSlide();
        } else {
          // 左スワイプ（次のスライド）
          nextSlide();
        }
      }
    }

    const carouselContainer = document.getElementById('carousel-container');
    if (carouselContainer) {
      carouselContainer.addEventListener('touchstart', (e) => {
        touchStartX = e.touches[0].clientX;
      });

      carouselContainer.addEventListener('touchend', (e) => {
        touchEndX = e.changedTouches[0].clientX;
        handleMainCarouselSwipe();
      });
    }


    // メインカルーセルクリック時にモーダル表示
    slides.forEach((slide, index) => {
      slide.addEventListener('click', (e) => {
        // ナビゲーションボタンのクリックは無視
        if (e.target.closest('.carousel__nav')) {
          console.log('Navigation button clicked, ignoring');
          return;
        }
        
        console.log('🎯 Slide clicked, current slide index:', currentSlide);
        // 現在表示されているスライドに対応するメディアアイテムを取得
        const currentMedia = mediaItems[currentSlide];
        if (currentMedia) {
          console.log('🎯 Opening modal for media:', currentMedia.type, currentMedia.url);
          openModal(currentMedia);
        }
      });
    });

    // モーダル閉じるイベント
    if (modalClose) modalClose.addEventListener('click', closeModal);
    if (modalOverlay) modalOverlay.addEventListener('click', closeModal);
    
    // モーダルナビゲーションイベント
    if (modalPrev) modalPrev.addEventListener('click', prevModalSlide);
    if (modalNext) modalNext.addEventListener('click', nextModalSlide);

    // タッチスワイプ機能（モーダル）
    let modalTouchStartX = 0;
    let modalTouchEndX = 0;

    function handleModalSwipe() {
      const swipeDistance = modalTouchEndX - modalTouchStartX;
      if (Math.abs(swipeDistance) > minSwipeDistance) {
        if (swipeDistance > 0) {
          // 右スワイプ（前のスライド）
          prevModalSlide();
        } else {
          // 左スワイプ（次のスライド）
          nextModalSlide();
        }
      }
    }

    if (modalMedia) {
      modalMedia.addEventListener('touchstart', (e) => {
        modalTouchStartX = e.touches[0].clientX;
      });

      modalMedia.addEventListener('touchend', (e) => {
        modalTouchEndX = e.changedTouches[0].clientX;
        handleModalSwipe();
      });
    }
    
    // ESCキーでモーダルを閉じる、左右矢印キーでモーダル内ナビゲーション
    document.addEventListener('keydown', (e) => {
      if (modal.classList.contains('media-modal--active')) {
        if (e.key === 'Escape') {
          closeModal();
        } else if (e.key === 'ArrowLeft') {
          prevModalSlide();
        } else if (e.key === 'ArrowRight') {
          nextModalSlide();
        }
      } else {
        // モーダルが開いていない場合のカルーセルナビゲーション
        if (e.key === 'ArrowLeft') prevSlide();
        if (e.key === 'ArrowRight') nextSlide();
      }
    });

    // サムネイル動画の最初のフレームを表示
    function loadVideoThumbnails() {
      const thumbnailVideos = document.querySelectorAll('.carousel__thumbnail-video-element[data-video-src]');
      console.log('🎬 Found thumbnail videos:', thumbnailVideos.length);
      
      thumbnailVideos.forEach((video, index) => {
        const videoUrl = video.dataset.videoSrc;
        if (videoUrl) {
          console.log(`🎬 Loading thumbnail for video ${index}:`, videoUrl);
          
          // 動画のsrcを設定
          video.src = videoUrl;
          video.currentTime = 0.5; // 0.5秒地点のフレームを取得
          
          // メタデータが読み込まれたら最初のフレームに移動
          video.addEventListener('loadedmetadata', () => {
            console.log(`🎬 Video ${index} metadata loaded`);
            video.currentTime = 0.5; // 0.5秒地点
          });
          
          // フレームが読み込まれたら一時停止
          video.addEventListener('seeked', () => {
            console.log(`🎬 Video ${index} seeked to first frame`);
            video.pause();
          });
          
          // エラーハンドリング
          video.addEventListener('error', (e) => {
            console.error(`🎬 Error loading thumbnail video ${index}:`, e);
          });
        }
      });
    }
    
    // 初期表示
    showSlide(0);
    
    // サムネイル動画を初期化
    setTimeout(loadVideoThumbnails, 100);
    
    console.log('✅ All event listeners set up with HTML5 video support');
  });

  // シェア機能
  const shareButtons = document.querySelectorAll('.share-button');
  
  shareButtons.forEach(button => {
    button.addEventListener('click', (e) => {
      const buttonType = button.className.split(' ').find(cls => cls.includes('--'));
      const currentUrl = window.location.href;
      const pageTitle = document.title;
      
      switch (buttonType) {
        case 'share-button--twitter':
          const twitterUrl = `https://twitter.com/intent/tweet?text=${encodeURIComponent(pageTitle)}&url=${encodeURIComponent(currentUrl)}`;
          window.open(twitterUrl, '_blank', 'width=600,height=400');
          break;
          
        case 'share-button--line':
          const lineUrl = `https://social-plugins.line.me/lineit/share?url=${encodeURIComponent(currentUrl)}`;
          window.open(lineUrl, '_blank', 'width=600,height=400');
          break;
          
        case 'share-button--link':
          navigator.clipboard.writeText(currentUrl).then(() => {
            // コピー成功時の視覚的フィードバック
            const originalImg = button.innerHTML;
            button.innerHTML = `
              <div class="share-button__success">
                <svg viewBox="0 0 24 24" fill="currentColor" width="24" height="24">
                  <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"/>
                </svg>
                <span class="share-button__copied-text">Copied</span>
              </div>
            `;
            button.style.backgroundColor = '#10B981';
            
            setTimeout(() => {
              button.innerHTML = originalImg;
              button.style.backgroundColor = '#6B7280';
            }, 2000);
          }).catch(() => {
            prompt('URLをコピーしてください:', currentUrl);
          });
          break;
      }
    });
  });
</script>

