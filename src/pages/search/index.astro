---
import Layout from '../../layouts/Layout.astro';
import PetCard from '../../components/pets/PetCard.astro';
import PetTabs from '../../components/pets/PetTabs.astro';
import HeroSection from '../../components/sections/common/HeroSection.astro';
import ViewMoreButton from '../../components/ui/buttons/ViewMoreButton.astro';
import BannerSection from '../../components/sections/common/BannerSection.astro';
import ContactCTASection from '../../components/sections/common/ContactCTASection.astro';
import { getAllLatestPets, getLatestPetsByType } from '../../lib/api/pets/queries';
import '../../styles/layout/pets-grid.scss';

// 初期表示は「すべて」タブで18匹の混合表示
const allPets = await getAllLatestPets(18);
const initialPets = allPets;
// タブ切り替え用に犬と猫の18匹ずつのデータも取得
const dogs = await getLatestPetsByType('dog', 18);
const cats = await getLatestPetsByType('cat', 18);

// パンくずリストのデータ
const breadcrumbItems = [
  { label: 'ホーム', href: '/' },
  { label: '子犬・子猫を探す' }
];
---

<Layout title="ペットを探す | すべて">
  <main>
    <HeroSection 
      title="子犬・子猫を探す"
      image="/src/assets/images/backgrounds/img_bg-hero_search-01.webp"
      breadcrumbItems={breadcrumbItems}
    />
    <section class="pets-section">
      <div class="container">
        <PetTabs activeTab="all" />
        <div
          class="pets-grid"
          data-all-pets={JSON.stringify(initialPets)}
          data-dogs={JSON.stringify(dogs)}
          data-cats={JSON.stringify(cats)}
        >
          {initialPets.map((pet) => <PetCard pet={pet} />)}
        </div>
        <ViewMoreButton />
      </div>
    </section>
    
    <BannerSection />
    <ContactCTASection />
  </main>
</Layout>

<script>
  // 初期表示時のVIEW MOREボタン表示制御
  const initialAllPets = JSON.parse(document.querySelector('.pets-grid')?.dataset.allPets || '[]');
  const initialDogs = JSON.parse(document.querySelector('.pets-grid')?.dataset.dogs || '[]');
  const initialCats = JSON.parse(document.querySelector('.pets-grid')?.dataset.cats || '[]');
  
  const viewMoreButton = document.getElementById('viewMoreButton') as HTMLButtonElement;
  
  // 初期状態で18匹未満の場合はVIEW MOREボタンを非表示
  if (viewMoreButton) {
    if (initialAllPets.length < 18) {
      viewMoreButton.style.display = 'none';
    }
  }
</script>

<script>
  import { getImageUrl } from '../../lib/utils/image';
  import { formatDate } from '../../lib/utils/date';

  // 初期データを再度取得
  const initialAllPets = JSON.parse(document.querySelector('.pets-grid')?.dataset.allPets || '[]');
  const initialDogs = JSON.parse(document.querySelector('.pets-grid')?.dataset.dogs || '[]');
  const initialCats = JSON.parse(document.querySelector('.pets-grid')?.dataset.cats || '[]');

  // タブごとのオフセット管理
  let offsets = {
    all: 18,
    dog: 18,
    cat: 18
  };
  let currentTab = 'all'; // 現在のタブ
  let isLoading = false; // 読み込み状態

  const viewMoreButton = document.getElementById('viewMoreButton') as HTMLButtonElement;
  const petsGrid = document.querySelector('.pets-grid') as HTMLElement;

  if (viewMoreButton && petsGrid) {
    viewMoreButton.addEventListener('click', async () => {
      if (isLoading) return;
      
      isLoading = true;
      viewMoreButton.classList.add('loading');
      viewMoreButton.disabled = true;

      try {
        let apiUrl = '';
        if (currentTab === 'all') {
          apiUrl = `/api/pets?offset=${offsets.all}&limit=18`;
        } else {
          apiUrl = `/api/pets?offset=${offsets[currentTab]}&limit=18&animalType=${currentTab}`;
        }

        const response = await fetch(apiUrl);
        const newPets = await response.json();

        if (newPets && newPets.length > 0) {
          // 新しいペットカードを追加
          newPets.forEach((pet: any) => {
            const petCardHTML = `
              <div class="pet-card" data-animal-type="${pet.animalType}">
                <div class="pet-card__inner">
                  <div class="pet-card__image-container">
                    <img
                      class="pet-card__image"
                      src="${getImageUrl(pet.imageUrl01, 600, 600)}"
                      alt="${pet.breedTypeJa}の写真"
                      loading="lazy"
                      width="600"
                      height="600"
                      onerror="this.src='/src/assets/images/ui/img_loading-pet-image-01.webp'"
                    />
                  </div>
                  <div class="pet-card__info">
                    <h3 class="pet-card__title">
                      ${pet.breedTypeJa}
                      ${pet.gender === '男の子' ? '<span class="pet-card__gender male"><svg viewBox="0 0 24 24" fill="currentColor"><path d="M12 2C13.1 2 14 2.9 14 4C14 5.1 13.1 6 12 6C10.9 6 10 5.1 10 4C10 2.9 10.9 2 12 2M21 9V7L15 1H5C3.9 1 3 1.9 3 3V21C3 22.1 3.9 23 5 23H19C20.1 23 21 22.1 21 21V9H21Z"/></svg></span>' : ''}
                      ${pet.gender === '女の子' ? '<span class="pet-card__gender female"><svg viewBox="0 0 24 24" fill="currentColor"><path d="M12 4A4 4 0 0 1 16 8A4 4 0 0 1 12 12A4 4 0 0 1 8 8A4 4 0 0 1 12 4M12 14C16.42 14 20 15.79 20 18V20H4V18C4 15.79 7.58 14 12 14Z"/></svg></span>' : ''}
                    </h3>
                    <div class="pet-card__details">
                      <p class="pet-card__detail-item">色：${pet.color}</p>
                      <p class="pet-card__detail-item">誕生日：${formatDate(pet.birthday)}</p>
                      <p class="pet-card__detail-item">店舗：${pet.storeName}</p>
                    </div>
                  </div>
                </div>
              </div>
            `;
            petsGrid.insertAdjacentHTML('beforeend', petCardHTML);
          });

          offsets[currentTab] += 18;
          
          // 取得したデータが18未満の場合、VIEW MOREボタンを非表示
          if (newPets.length < 18) {
            viewMoreButton.style.display = 'none';
          }
        } else {
          // データがない場合はボタンを非表示
          viewMoreButton.style.display = 'none';
        }
      } catch (error) {
        console.error('Error loading more pets:', error);
        // エラー時はボタンのテキストを変更
        viewMoreButton.querySelector('.view-more-text')!.textContent = 'エラーが発生しました';
        viewMoreButton.disabled = true;
      } finally {
        isLoading = false;
        viewMoreButton.classList.remove('loading');
        viewMoreButton.disabled = false;
      }
    });
  }

  // タブ切り替え時のVIEW MOREボタン状態リセット
  document.addEventListener('tabChanged', (event: any) => {
    currentTab = event.detail.tab;
    if (viewMoreButton) {
      // タブごとの初期データ数を確認
      let initialCount = 0;
      if (currentTab === 'all') {
        initialCount = initialAllPets.length;
      } else if (currentTab === 'dog') {
        initialCount = initialDogs.length;
      } else if (currentTab === 'cat') {
        initialCount = initialCats.length;
      }
      
      // 18匹未満の場合はVIEW MOREボタンを非表示
      if (initialCount < 18) {
        viewMoreButton.style.display = 'none';
      } else {
        viewMoreButton.style.display = 'flex';
        viewMoreButton.disabled = false;
        viewMoreButton.querySelector('.view-more-text')!.textContent = 'VIEW MORE';
      }
    }
  });
</script>

<style lang="scss">
  @import '../../styles/variables';
  @import '../../styles/mixins';

  .pets-section {
    @include section-padding;
    background-color: $color-background;
    min-height: calc(100vh - 400px);
  }
</style>